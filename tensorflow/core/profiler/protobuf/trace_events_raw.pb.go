// This defines the RawData attachment to the TraceEvent proto.
// It is in a separate file to avoid all consumers needing these dependencies.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: tensorflow/core/profiler/protobuf/trace_events_raw.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// RawData contains raw data that can be used to attach further details to a
// TraceEvent. TraceEvents store this raw data in serialized form so it can be
// decoded on demand. This can improve performance as TraceEvents are often
// subject to filtering and only a small subset actually needs to be decoded.
// NEXT ID: 4
type RawData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to RawData:
	//
	//	*RawData_DmaActivity
	//	*RawData_Args
	//	*RawData_TpuData
	RawData isRawData_RawData `protobuf_oneof:"raw_data"`
}

func (x *RawData) Reset() {
	*x = RawData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_trace_events_raw_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawData) ProtoMessage() {}

func (x *RawData) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_trace_events_raw_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawData.ProtoReflect.Descriptor instead.
func (*RawData) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_trace_events_raw_proto_rawDescGZIP(), []int{0}
}

func (m *RawData) GetRawData() isRawData_RawData {
	if m != nil {
		return m.RawData
	}
	return nil
}

func (x *RawData) GetDmaActivity() *DmaActivity {
	if x, ok := x.GetRawData().(*RawData_DmaActivity); ok {
		return x.DmaActivity
	}
	return nil
}

func (x *RawData) GetArgs() *TraceEventArguments {
	if x, ok := x.GetRawData().(*RawData_Args); ok {
		return x.Args
	}
	return nil
}

func (x *RawData) GetTpuData() *TpuTraceData {
	if x, ok := x.GetRawData().(*RawData_TpuData); ok {
		return x.TpuData
	}
	return nil
}

type isRawData_RawData interface {
	isRawData_RawData()
}

type RawData_DmaActivity struct {
	DmaActivity *DmaActivity `protobuf:"bytes,1,opt,name=dma_activity,json=dmaActivity,oneof"`
}

type RawData_Args struct {
	Args *TraceEventArguments `protobuf:"bytes,2,opt,name=args,oneof"`
}

type RawData_TpuData struct {
	TpuData *TpuTraceData `protobuf:"bytes,3,opt,name=tpu_data,json=tpuData,oneof"` // Never used. For the ease of template code.
}

func (*RawData_DmaActivity) isRawData_RawData() {}

func (*RawData_Args) isRawData_RawData() {}

func (*RawData_TpuData) isRawData_RawData() {}

// DmaActivity can be used to add DMA details to a trace event.
type DmaActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTimeCycles *uint64 `protobuf:"varint,1,opt,name=start_time_cycles,json=startTimeCycles" json:"start_time_cycles,omitempty"`
	EndTimeCycles   *uint64 `protobuf:"varint,2,opt,name=end_time_cycles,json=endTimeCycles" json:"end_time_cycles,omitempty"`
	Kilobytes       *uint64 `protobuf:"varint,4,opt,name=kilobytes" json:"kilobytes,omitempty"`
	MeshChipId      *uint32 `protobuf:"varint,5,opt,name=mesh_chip_id,json=meshChipId" json:"mesh_chip_id,omitempty"`
	CoreId          *uint32 `protobuf:"varint,11,opt,name=core_id,json=coreId" json:"core_id,omitempty"`
	DmaAddress      *uint64 `protobuf:"varint,6,opt,name=dma_address,json=dmaAddress" json:"dma_address,omitempty"`
	Multicast       *uint32 `protobuf:"varint,8,opt,name=multicast" json:"multicast,omitempty"`
	Segmented       *uint32 `protobuf:"varint,9,opt,name=segmented" json:"segmented,omitempty"`
	Temporary       *uint64 `protobuf:"varint,10,opt,name=temporary" json:"temporary,omitempty"` // temporary field, not saved to .sstable.
}

func (x *DmaActivity) Reset() {
	*x = DmaActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_trace_events_raw_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DmaActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DmaActivity) ProtoMessage() {}

func (x *DmaActivity) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_trace_events_raw_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DmaActivity.ProtoReflect.Descriptor instead.
func (*DmaActivity) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_trace_events_raw_proto_rawDescGZIP(), []int{1}
}

func (x *DmaActivity) GetStartTimeCycles() uint64 {
	if x != nil && x.StartTimeCycles != nil {
		return *x.StartTimeCycles
	}
	return 0
}

func (x *DmaActivity) GetEndTimeCycles() uint64 {
	if x != nil && x.EndTimeCycles != nil {
		return *x.EndTimeCycles
	}
	return 0
}

func (x *DmaActivity) GetKilobytes() uint64 {
	if x != nil && x.Kilobytes != nil {
		return *x.Kilobytes
	}
	return 0
}

func (x *DmaActivity) GetMeshChipId() uint32 {
	if x != nil && x.MeshChipId != nil {
		return *x.MeshChipId
	}
	return 0
}

func (x *DmaActivity) GetCoreId() uint32 {
	if x != nil && x.CoreId != nil {
		return *x.CoreId
	}
	return 0
}

func (x *DmaActivity) GetDmaAddress() uint64 {
	if x != nil && x.DmaAddress != nil {
		return *x.DmaAddress
	}
	return 0
}

func (x *DmaActivity) GetMulticast() uint32 {
	if x != nil && x.Multicast != nil {
		return *x.Multicast
	}
	return 0
}

func (x *DmaActivity) GetSegmented() uint32 {
	if x != nil && x.Segmented != nil {
		return *x.Segmented
	}
	return 0
}

func (x *DmaActivity) GetTemporary() uint64 {
	if x != nil && x.Temporary != nil {
		return *x.Temporary
	}
	return 0
}

// Generic trace event arguments.
type TraceEventArguments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arg []*TraceEventArguments_Argument `protobuf:"bytes,1,rep,name=arg" json:"arg,omitempty"`
}

func (x *TraceEventArguments) Reset() {
	*x = TraceEventArguments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_trace_events_raw_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceEventArguments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceEventArguments) ProtoMessage() {}

func (x *TraceEventArguments) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_trace_events_raw_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceEventArguments.ProtoReflect.Descriptor instead.
func (*TraceEventArguments) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_trace_events_raw_proto_rawDescGZIP(), []int{2}
}

func (x *TraceEventArguments) GetArg() []*TraceEventArguments_Argument {
	if x != nil {
		return x.Arg
	}
	return nil
}

type TpuTraceData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dummy *uint32 `protobuf:"varint,1,opt,name=dummy" json:"dummy,omitempty"`
}

func (x *TpuTraceData) Reset() {
	*x = TpuTraceData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_trace_events_raw_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TpuTraceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TpuTraceData) ProtoMessage() {}

func (x *TpuTraceData) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_trace_events_raw_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TpuTraceData.ProtoReflect.Descriptor instead.
func (*TpuTraceData) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_trace_events_raw_proto_rawDescGZIP(), []int{3}
}

func (x *TpuTraceData) GetDummy() uint32 {
	if x != nil && x.Dummy != nil {
		return *x.Dummy
	}
	return 0
}

type TraceEventArguments_Argument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Types that are assignable to Value:
	//
	//	*TraceEventArguments_Argument_StrValue
	//	*TraceEventArguments_Argument_UintValue
	//	*TraceEventArguments_Argument_IntValue
	//	*TraceEventArguments_Argument_DoubleValue
	//	*TraceEventArguments_Argument_RefValue
	Value isTraceEventArguments_Argument_Value `protobuf_oneof:"value"`
}

func (x *TraceEventArguments_Argument) Reset() {
	*x = TraceEventArguments_Argument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_trace_events_raw_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceEventArguments_Argument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceEventArguments_Argument) ProtoMessage() {}

func (x *TraceEventArguments_Argument) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_trace_events_raw_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceEventArguments_Argument.ProtoReflect.Descriptor instead.
func (*TraceEventArguments_Argument) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_trace_events_raw_proto_rawDescGZIP(), []int{2, 0}
}

func (x *TraceEventArguments_Argument) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (m *TraceEventArguments_Argument) GetValue() isTraceEventArguments_Argument_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *TraceEventArguments_Argument) GetStrValue() string {
	if x, ok := x.GetValue().(*TraceEventArguments_Argument_StrValue); ok {
		return x.StrValue
	}
	return ""
}

func (x *TraceEventArguments_Argument) GetUintValue() uint64 {
	if x, ok := x.GetValue().(*TraceEventArguments_Argument_UintValue); ok {
		return x.UintValue
	}
	return 0
}

func (x *TraceEventArguments_Argument) GetIntValue() int64 {
	if x, ok := x.GetValue().(*TraceEventArguments_Argument_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (x *TraceEventArguments_Argument) GetDoubleValue() float64 {
	if x, ok := x.GetValue().(*TraceEventArguments_Argument_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (x *TraceEventArguments_Argument) GetRefValue() uint64 {
	if x, ok := x.GetValue().(*TraceEventArguments_Argument_RefValue); ok {
		return x.RefValue
	}
	return 0
}

type isTraceEventArguments_Argument_Value interface {
	isTraceEventArguments_Argument_Value()
}

type TraceEventArguments_Argument_StrValue struct {
	StrValue string `protobuf:"bytes,2,opt,name=str_value,json=strValue,oneof"`
}

type TraceEventArguments_Argument_UintValue struct {
	UintValue uint64 `protobuf:"varint,3,opt,name=uint_value,json=uintValue,oneof"`
}

type TraceEventArguments_Argument_IntValue struct {
	IntValue int64 `protobuf:"varint,5,opt,name=int_value,json=intValue,oneof"`
}

type TraceEventArguments_Argument_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,4,opt,name=double_value,json=doubleValue,oneof"`
}

type TraceEventArguments_Argument_RefValue struct {
	RefValue uint64 `protobuf:"fixed64,6,opt,name=ref_value,json=refValue,oneof"` // string type but stored in metadata.
}

func (*TraceEventArguments_Argument_StrValue) isTraceEventArguments_Argument_Value() {}

func (*TraceEventArguments_Argument_UintValue) isTraceEventArguments_Argument_Value() {}

func (*TraceEventArguments_Argument_IntValue) isTraceEventArguments_Argument_Value() {}

func (*TraceEventArguments_Argument_DoubleValue) isTraceEventArguments_Argument_Value() {}

func (*TraceEventArguments_Argument_RefValue) isTraceEventArguments_Argument_Value() {}

var File_tensorflow_core_profiler_protobuf_trace_events_raw_proto protoreflect.FileDescriptor

var file_tensorflow_core_profiler_protobuf_trace_events_raw_proto_rawDesc = []byte{
	0x0a, 0x38, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x5f, 0x72, 0x61, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x74, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x22,
	0xdc, 0x01, 0x0a, 0x07, 0x52, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x45, 0x0a, 0x0c, 0x64,
	0x6d, 0x61, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x44, 0x6d, 0x61, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x6d, 0x61, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x12, 0x3e, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x48, 0x00, 0x52, 0x04, 0x61, 0x72,
	0x67, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x74, 0x70, 0x75, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x70, 0x75, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x07, 0x74, 0x70, 0x75, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0xbb,
	0x02, 0x0a, 0x0b, 0x44, 0x6d, 0x61, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x2a,
	0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x79, 0x63,
	0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x79, 0x63, 0x6c,
	0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6b, 0x69, 0x6c, 0x6f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6b, 0x69, 0x6c, 0x6f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x68, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x65, 0x73, 0x68, 0x43, 0x68, 0x69, 0x70,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64,
	0x6d, 0x61, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x64, 0x6d, 0x61, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x6d, 0x70,
	0x6f, 0x72, 0x61, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x65, 0x6d,
	0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0xa7, 0x02, 0x0a,
	0x13, 0x54, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x67, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x03, 0x61, 0x72, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x03, 0x61, 0x72, 0x67, 0x1a, 0xca, 0x01, 0x0a, 0x08, 0x41, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x73, 0x74,
	0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x08, 0x73, 0x74, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x75, 0x69, 0x6e,
	0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52,
	0x09, 0x75, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x69, 0x6e,
	0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52,
	0x08, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x00, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d,
	0x0a, 0x09, 0x72, 0x65, 0x66, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x06, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x66, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x24, 0x0a, 0x0c, 0x54, 0x70, 0x75, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x42, 0xeb, 0x01, 0x0a,
	0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x42, 0x13, 0x54, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x61, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x4b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x69, 0x72, 0x65,
	0x6e, 0x61, 0x73, 0x2f, 0x67, 0x6f, 0x2d, 0x74, 0x66, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e,
	0x67, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x74, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0xf8, 0x01, 0x01, 0xa2,
	0x02, 0x03, 0x54, 0x50, 0x58, 0xaa, 0x02, 0x13, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0xca, 0x02, 0x13, 0x54, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x72, 0xe2, 0x02, 0x1f, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5c, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x14, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x3a, 0x3a, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72,
}

var (
	file_tensorflow_core_profiler_protobuf_trace_events_raw_proto_rawDescOnce sync.Once
	file_tensorflow_core_profiler_protobuf_trace_events_raw_proto_rawDescData = file_tensorflow_core_profiler_protobuf_trace_events_raw_proto_rawDesc
)

func file_tensorflow_core_profiler_protobuf_trace_events_raw_proto_rawDescGZIP() []byte {
	file_tensorflow_core_profiler_protobuf_trace_events_raw_proto_rawDescOnce.Do(func() {
		file_tensorflow_core_profiler_protobuf_trace_events_raw_proto_rawDescData = protoimpl.X.CompressGZIP(file_tensorflow_core_profiler_protobuf_trace_events_raw_proto_rawDescData)
	})
	return file_tensorflow_core_profiler_protobuf_trace_events_raw_proto_rawDescData
}

var file_tensorflow_core_profiler_protobuf_trace_events_raw_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_tensorflow_core_profiler_protobuf_trace_events_raw_proto_goTypes = []interface{}{
	(*RawData)(nil),                      // 0: tensorflow.profiler.RawData
	(*DmaActivity)(nil),                  // 1: tensorflow.profiler.DmaActivity
	(*TraceEventArguments)(nil),          // 2: tensorflow.profiler.TraceEventArguments
	(*TpuTraceData)(nil),                 // 3: tensorflow.profiler.TpuTraceData
	(*TraceEventArguments_Argument)(nil), // 4: tensorflow.profiler.TraceEventArguments.Argument
}
var file_tensorflow_core_profiler_protobuf_trace_events_raw_proto_depIdxs = []int32{
	1, // 0: tensorflow.profiler.RawData.dma_activity:type_name -> tensorflow.profiler.DmaActivity
	2, // 1: tensorflow.profiler.RawData.args:type_name -> tensorflow.profiler.TraceEventArguments
	3, // 2: tensorflow.profiler.RawData.tpu_data:type_name -> tensorflow.profiler.TpuTraceData
	4, // 3: tensorflow.profiler.TraceEventArguments.arg:type_name -> tensorflow.profiler.TraceEventArguments.Argument
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_tensorflow_core_profiler_protobuf_trace_events_raw_proto_init() }
func file_tensorflow_core_profiler_protobuf_trace_events_raw_proto_init() {
	if File_tensorflow_core_profiler_protobuf_trace_events_raw_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tensorflow_core_profiler_protobuf_trace_events_raw_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_trace_events_raw_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DmaActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_trace_events_raw_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceEventArguments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_trace_events_raw_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TpuTraceData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_trace_events_raw_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceEventArguments_Argument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tensorflow_core_profiler_protobuf_trace_events_raw_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*RawData_DmaActivity)(nil),
		(*RawData_Args)(nil),
		(*RawData_TpuData)(nil),
	}
	file_tensorflow_core_profiler_protobuf_trace_events_raw_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*TraceEventArguments_Argument_StrValue)(nil),
		(*TraceEventArguments_Argument_UintValue)(nil),
		(*TraceEventArguments_Argument_IntValue)(nil),
		(*TraceEventArguments_Argument_DoubleValue)(nil),
		(*TraceEventArguments_Argument_RefValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tensorflow_core_profiler_protobuf_trace_events_raw_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tensorflow_core_profiler_protobuf_trace_events_raw_proto_goTypes,
		DependencyIndexes: file_tensorflow_core_profiler_protobuf_trace_events_raw_proto_depIdxs,
		MessageInfos:      file_tensorflow_core_profiler_protobuf_trace_events_raw_proto_msgTypes,
	}.Build()
	File_tensorflow_core_profiler_protobuf_trace_events_raw_proto = out.File
	file_tensorflow_core_profiler_protobuf_trace_events_raw_proto_rawDesc = nil
	file_tensorflow_core_profiler_protobuf_trace_events_raw_proto_goTypes = nil
	file_tensorflow_core_profiler_protobuf_trace_events_raw_proto_depIdxs = nil
}
