// This file describes a pre-aggregated event format for further processing and
// displaying of trace data.
//
// A trace can contain events from several devices. Each device has
// several resources. These can be threads on a CPU or specific computation
// units on hardware. Within each resource, many trace events occur over time.
// Most resources can only execute one thing at a time and so trace events don't
// overlap in those.
//
// Use cases:
// ==========
// Traces in this format are can be consumed by timeline views (e.g. like
// the chrome trace viewer).
//
// The goal is to have this data be independent of a specific hardware type and
// be able to represent traces of arbitrary combinations of CPU, GPU, TPU and
// whatever else might come up.
//
// Data format:
// ============
// The messages Trace>Device>Resource form the metadata necessary to understand
// this trace. TraceEvent objects themselves are not nested within these
// structures for two reasons:
//
// - Efficient on-disk representation: A trace can become huge and have millions
//   of trace events. If the events were nested inside the other data
//   structures, a single large proto would have to be stored. Having the traces
//   outside of those structures means that efficient and shardable storage
//   formats can be used.
//
// - Streaming use cases: Some consumers might not be interested in a
//   per-device-and-resource-structured representation. They might just want to
//   churn through all of the trace events to get aggregate representations. In
//   such cases, it's much more effective to churn through the events one by one
//   rather than creating the huge memory structure.
//
// The downside is obviously that two additional integers need to be stored per
// trace event to identify the device and resource it occurred in.
//
// Timestamps:
// ===========
// Events may be as short as one processor cycle - on the order of 1 ns.
// Timestamps are therefore 64-bit picosecond counters, with 0 being the
// start of the trace, and overflow occurring after ~200 days.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: tensorflow/core/profiler/protobuf/trace_events.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Indicates the order of the event within a flow.
// Events with the same flow_id will appear in trace_viewer linked by arrows.
// For an arrow to be shown, at least the FLOW_START and FLOW_END must be
// present. There can be zero or more FLOW_MID events in the flow. Arrows are
// drawn from FLOW_START to FLOW_END and through each FLOW_MID event in
// timestamp order.
type TraceEvent_FlowEntryType int32

const (
	TraceEvent_FLOW_NONE  TraceEvent_FlowEntryType = 0
	TraceEvent_FLOW_START TraceEvent_FlowEntryType = 1
	TraceEvent_FLOW_MID   TraceEvent_FlowEntryType = 2
	TraceEvent_FLOW_END   TraceEvent_FlowEntryType = 3
)

// Enum value maps for TraceEvent_FlowEntryType.
var (
	TraceEvent_FlowEntryType_name = map[int32]string{
		0: "FLOW_NONE",
		1: "FLOW_START",
		2: "FLOW_MID",
		3: "FLOW_END",
	}
	TraceEvent_FlowEntryType_value = map[string]int32{
		"FLOW_NONE":  0,
		"FLOW_START": 1,
		"FLOW_MID":   2,
		"FLOW_END":   3,
	}
)

func (x TraceEvent_FlowEntryType) Enum() *TraceEvent_FlowEntryType {
	p := new(TraceEvent_FlowEntryType)
	*p = x
	return p
}

func (x TraceEvent_FlowEntryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TraceEvent_FlowEntryType) Descriptor() protoreflect.EnumDescriptor {
	return file_tensorflow_core_profiler_protobuf_trace_events_proto_enumTypes[0].Descriptor()
}

func (TraceEvent_FlowEntryType) Type() protoreflect.EnumType {
	return &file_tensorflow_core_profiler_protobuf_trace_events_proto_enumTypes[0]
}

func (x TraceEvent_FlowEntryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TraceEvent_FlowEntryType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TraceEvent_FlowEntryType(num)
	return nil
}

// Deprecated: Use TraceEvent_FlowEntryType.Descriptor instead.
func (TraceEvent_FlowEntryType) EnumDescriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_trace_events_proto_rawDescGZIP(), []int{3, 0}
}

// A 'Trace' contains metadata for the individual traces of a system.
type Trace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The devices that this trace has information about. Maps from device_id to
	// more data about the specific device.
	Devices map[uint32]*Device `protobuf:"bytes,1,rep,name=devices" json:"devices,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// The tasks that were traced, keyed by a unique ID for the server on
	// which the task ran.
	Tasks map[uint32]*Task `protobuf:"bytes,6,rep,name=tasks" json:"tasks,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// The time range that this trace covers.
	// Timestamps are picoseconds since tracing started.
	MinTimestampPs *uint64 `protobuf:"varint,4,opt,name=min_timestamp_ps,json=minTimestampPs" json:"min_timestamp_ps,omitempty"` // Start of first event.
	MaxTimestampPs *uint64 `protobuf:"varint,5,opt,name=max_timestamp_ps,json=maxTimestampPs" json:"max_timestamp_ps,omitempty"` // End of last event.
	NumEvents      *uint64 `protobuf:"varint,7,opt,name=num_events,json=numEvents" json:"num_events,omitempty"`
	// String intern table for event's name or TraceMe argument.
	NameTable map[uint64]string `protobuf:"bytes,8,rep,name=name_table,json=nameTable" json:"name_table,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (x *Trace) Reset() {
	*x = Trace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_trace_events_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trace) ProtoMessage() {}

func (x *Trace) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_trace_events_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trace.ProtoReflect.Descriptor instead.
func (*Trace) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_trace_events_proto_rawDescGZIP(), []int{0}
}

func (x *Trace) GetDevices() map[uint32]*Device {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *Trace) GetTasks() map[uint32]*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *Trace) GetMinTimestampPs() uint64 {
	if x != nil && x.MinTimestampPs != nil {
		return *x.MinTimestampPs
	}
	return 0
}

func (x *Trace) GetMaxTimestampPs() uint64 {
	if x != nil && x.MaxTimestampPs != nil {
		return *x.MaxTimestampPs
	}
	return 0
}

func (x *Trace) GetNumEvents() uint64 {
	if x != nil && x.NumEvents != nil {
		return *x.NumEvents
	}
	return 0
}

func (x *Trace) GetNameTable() map[uint64]string {
	if x != nil {
		return x.NameTable
	}
	return nil
}

// A 'device' is a physical entity in the system and is comprised of several
// resources.
type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the device.
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The id of this device, unique in a single trace.
	DeviceId *uint32 `protobuf:"varint,2,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
	// The resources on this device, keyed by resource_id;
	Resources map[uint32]*Resource `protobuf:"bytes,3,rep,name=resources" json:"resources,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (x *Device) Reset() {
	*x = Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_trace_events_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_trace_events_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_trace_events_proto_rawDescGZIP(), []int{1}
}

func (x *Device) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Device) GetDeviceId() uint32 {
	if x != nil && x.DeviceId != nil {
		return *x.DeviceId
	}
	return 0
}

func (x *Device) GetResources() map[uint32]*Resource {
	if x != nil {
		return x.Resources
	}
	return nil
}

// A 'resource' generally is a specific computation component on a device. These
// can range from threads on CPUs to specific arithmetic units on hardware
// devices.
type Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the resource.
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The id of the resource. Unique within a device.
	ResourceId *uint32 `protobuf:"varint,2,opt,name=resource_id,json=resourceId" json:"resource_id,omitempty"`
	// Number of events added to this resource.
	NumEvents *uint32 `protobuf:"varint,3,opt,name=num_events,json=numEvents" json:"num_events,omitempty"`
}

func (x *Resource) Reset() {
	*x = Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_trace_events_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource) ProtoMessage() {}

func (x *Resource) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_trace_events_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource.ProtoReflect.Descriptor instead.
func (*Resource) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_trace_events_proto_rawDescGZIP(), []int{2}
}

func (x *Resource) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Resource) GetResourceId() uint32 {
	if x != nil && x.ResourceId != nil {
		return *x.ResourceId
	}
	return 0
}

func (x *Resource) GetNumEvents() uint32 {
	if x != nil && x.NumEvents != nil {
		return *x.NumEvents
	}
	return 0
}

type TraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the device that this event occurred on. The full dataset should
	// have this device present in the Trace object.
	DeviceId *uint32 `protobuf:"varint,1,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
	// The id of the resource that this event occurred on. The full dataset should
	// have this resource present in the Device object of the Trace object. A
	// resource_id is unique on a specific device, but not necessarily within the
	// trace.
	// NOTE: counter events do not have this field set as they are per device.
	ResourceId *uint32 `protobuf:"varint,2,opt,name=resource_id,json=resourceId" json:"resource_id,omitempty"`
	// Types that are assignable to NameOneof:
	//
	//	*TraceEvent_Name
	//	*TraceEvent_NameRef
	NameOneof isTraceEvent_NameOneof `protobuf_oneof:"name_oneof"`
	// The group id which this event belongs to. This allows the trace viewer to
	// show only a particular group of trace events.
	GroupId *int64 `protobuf:"varint,5,opt,name=group_id,json=groupId,def=-1" json:"group_id,omitempty"`
	// The timestamp when this event occurred (picos since tracing started).
	// This timestamp is in the range [min_timestamp, max_timestamp].
	TimestampPs *uint64 `protobuf:"varint,6,opt,name=timestamp_ps,json=timestampPs" json:"timestamp_ps,omitempty"`
	// The duration of the event in picoseconds, if applicable.
	// Events without duration are called instant events.
	DurationPs *uint64 `protobuf:"varint,7,opt,name=duration_ps,json=durationPs" json:"duration_ps,omitempty"`
	// Storage for additional details, e.g. the raw data that led to this
	// TraceEvent. These are stored as raw data so that we don't pay the
	// deserialization cost (memory and runtime) if the data isn't used.
	// See RawData in trace_events_raw.proto.
	RawData []byte `protobuf:"bytes,8,opt,name=raw_data,json=rawData" json:"raw_data,omitempty"`
	// Used to correlate the multiple events of a flow.
	FlowId        *uint64                   `protobuf:"varint,9,opt,name=flow_id,json=flowId" json:"flow_id,omitempty"`
	FlowEntryType *TraceEvent_FlowEntryType `protobuf:"varint,10,opt,name=flow_entry_type,json=flowEntryType,enum=tensorflow.profiler.TraceEvent_FlowEntryType" json:"flow_entry_type,omitempty"`
	FlowCategory  *uint32                   `protobuf:"varint,11,opt,name=flow_category,json=flowCategory" json:"flow_category,omitempty"`
	// For streaming trace viewer frontend deduplication, we need an unique id
	// for each events, in the same time, we want to reduce the entropy overhead
	// introduced by this. therefore we will use tuple<device_id, timestamp_ps,
	// serial> as unique ids, serial is optional and only required when timestamp
	// is not unique.
	Serial *uint32 `protobuf:"varint,13,opt,name=serial" json:"serial,omitempty"`
}

// Default values for TraceEvent fields.
const (
	Default_TraceEvent_GroupId = int64(-1)
)

func (x *TraceEvent) Reset() {
	*x = TraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_trace_events_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceEvent) ProtoMessage() {}

func (x *TraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_trace_events_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceEvent.ProtoReflect.Descriptor instead.
func (*TraceEvent) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_trace_events_proto_rawDescGZIP(), []int{3}
}

func (x *TraceEvent) GetDeviceId() uint32 {
	if x != nil && x.DeviceId != nil {
		return *x.DeviceId
	}
	return 0
}

func (x *TraceEvent) GetResourceId() uint32 {
	if x != nil && x.ResourceId != nil {
		return *x.ResourceId
	}
	return 0
}

func (m *TraceEvent) GetNameOneof() isTraceEvent_NameOneof {
	if m != nil {
		return m.NameOneof
	}
	return nil
}

func (x *TraceEvent) GetName() string {
	if x, ok := x.GetNameOneof().(*TraceEvent_Name); ok {
		return x.Name
	}
	return ""
}

func (x *TraceEvent) GetNameRef() uint64 {
	if x, ok := x.GetNameOneof().(*TraceEvent_NameRef); ok {
		return x.NameRef
	}
	return 0
}

func (x *TraceEvent) GetGroupId() int64 {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return Default_TraceEvent_GroupId
}

func (x *TraceEvent) GetTimestampPs() uint64 {
	if x != nil && x.TimestampPs != nil {
		return *x.TimestampPs
	}
	return 0
}

func (x *TraceEvent) GetDurationPs() uint64 {
	if x != nil && x.DurationPs != nil {
		return *x.DurationPs
	}
	return 0
}

func (x *TraceEvent) GetRawData() []byte {
	if x != nil {
		return x.RawData
	}
	return nil
}

func (x *TraceEvent) GetFlowId() uint64 {
	if x != nil && x.FlowId != nil {
		return *x.FlowId
	}
	return 0
}

func (x *TraceEvent) GetFlowEntryType() TraceEvent_FlowEntryType {
	if x != nil && x.FlowEntryType != nil {
		return *x.FlowEntryType
	}
	return TraceEvent_FLOW_NONE
}

func (x *TraceEvent) GetFlowCategory() uint32 {
	if x != nil && x.FlowCategory != nil {
		return *x.FlowCategory
	}
	return 0
}

func (x *TraceEvent) GetSerial() uint32 {
	if x != nil && x.Serial != nil {
		return *x.Serial
	}
	return 0
}

type isTraceEvent_NameOneof interface {
	isTraceEvent_NameOneof()
}

type TraceEvent_Name struct {
	// The name of this trace event.
	Name string `protobuf:"bytes,3,opt,name=name,oneof"`
}

type TraceEvent_NameRef struct {
	// Reference of the name in Trace's name_table (e.g. in SStable format).
	NameRef uint64 `protobuf:"fixed64,12,opt,name=name_ref,json=nameRef,oneof"`
}

func (*TraceEvent_Name) isTraceEvent_NameOneof() {}

func (*TraceEvent_NameRef) isTraceEvent_NameOneof() {}

var File_tensorflow_core_profiler_protobuf_trace_events_proto protoreflect.FileDescriptor

var file_tensorflow_core_profiler_protobuf_trace_events_proto_rawDesc = []byte{
	0x0a, 0x34, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x1a, 0x2c, 0x74, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbc, 0x04, 0x0a, 0x05, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x74, 0x61,
	0x73, 0x6b, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x5f, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6d,
	0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x50, 0x73, 0x12, 0x28, 0x0a,
	0x10, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x70,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x50, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6e, 0x75, 0x6d,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x48, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72,
	0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x1a, 0x57, 0x0a, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x53, 0x0a, 0x0a, 0x54, 0x61, 0x73,
	0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c,
	0x0a, 0x0e, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x02,
	0x10, 0x03, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0xe6, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x1a, 0x5b,
	0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x04, 0x10,
	0x05, 0x22, 0x5e, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x22, 0x88, 0x04, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x08, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x66,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x06, 0x48, 0x00, 0x52, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x66, 0x12, 0x1d, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x70, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x50, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x17, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x0f, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2d, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0d, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x22, 0x4a, 0x0a, 0x0d,
	0x46, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a,
	0x09, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08,
	0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x4d, 0x49, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x4c,
	0x4f, 0x57, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x03, 0x42, 0x0c, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x42, 0xe8, 0x01, 0x0a,
	0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x42, 0x10, 0x54, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4b, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x69, 0x72, 0x65, 0x6e, 0x61, 0x73,
	0x2f, 0x67, 0x6f, 0x2d, 0x74, 0x66, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2d, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0xf8, 0x01, 0x01, 0xa2, 0x02, 0x03, 0x54,
	0x50, 0x58, 0xaa, 0x02, 0x13, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0xca, 0x02, 0x13, 0x54, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0xe2, 0x02,
	0x1f, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5c, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x72, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x14, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x3a, 0x3a, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72,
}

var (
	file_tensorflow_core_profiler_protobuf_trace_events_proto_rawDescOnce sync.Once
	file_tensorflow_core_profiler_protobuf_trace_events_proto_rawDescData = file_tensorflow_core_profiler_protobuf_trace_events_proto_rawDesc
)

func file_tensorflow_core_profiler_protobuf_trace_events_proto_rawDescGZIP() []byte {
	file_tensorflow_core_profiler_protobuf_trace_events_proto_rawDescOnce.Do(func() {
		file_tensorflow_core_profiler_protobuf_trace_events_proto_rawDescData = protoimpl.X.CompressGZIP(file_tensorflow_core_profiler_protobuf_trace_events_proto_rawDescData)
	})
	return file_tensorflow_core_profiler_protobuf_trace_events_proto_rawDescData
}

var file_tensorflow_core_profiler_protobuf_trace_events_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_tensorflow_core_profiler_protobuf_trace_events_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_tensorflow_core_profiler_protobuf_trace_events_proto_goTypes = []interface{}{
	(TraceEvent_FlowEntryType)(0), // 0: tensorflow.profiler.TraceEvent.FlowEntryType
	(*Trace)(nil),                 // 1: tensorflow.profiler.Trace
	(*Device)(nil),                // 2: tensorflow.profiler.Device
	(*Resource)(nil),              // 3: tensorflow.profiler.Resource
	(*TraceEvent)(nil),            // 4: tensorflow.profiler.TraceEvent
	nil,                           // 5: tensorflow.profiler.Trace.DevicesEntry
	nil,                           // 6: tensorflow.profiler.Trace.TasksEntry
	nil,                           // 7: tensorflow.profiler.Trace.NameTableEntry
	nil,                           // 8: tensorflow.profiler.Device.ResourcesEntry
	(*Task)(nil),                  // 9: tensorflow.profiler.Task
}
var file_tensorflow_core_profiler_protobuf_trace_events_proto_depIdxs = []int32{
	5, // 0: tensorflow.profiler.Trace.devices:type_name -> tensorflow.profiler.Trace.DevicesEntry
	6, // 1: tensorflow.profiler.Trace.tasks:type_name -> tensorflow.profiler.Trace.TasksEntry
	7, // 2: tensorflow.profiler.Trace.name_table:type_name -> tensorflow.profiler.Trace.NameTableEntry
	8, // 3: tensorflow.profiler.Device.resources:type_name -> tensorflow.profiler.Device.ResourcesEntry
	0, // 4: tensorflow.profiler.TraceEvent.flow_entry_type:type_name -> tensorflow.profiler.TraceEvent.FlowEntryType
	2, // 5: tensorflow.profiler.Trace.DevicesEntry.value:type_name -> tensorflow.profiler.Device
	9, // 6: tensorflow.profiler.Trace.TasksEntry.value:type_name -> tensorflow.profiler.Task
	3, // 7: tensorflow.profiler.Device.ResourcesEntry.value:type_name -> tensorflow.profiler.Resource
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_tensorflow_core_profiler_protobuf_trace_events_proto_init() }
func file_tensorflow_core_profiler_protobuf_trace_events_proto_init() {
	if File_tensorflow_core_profiler_protobuf_trace_events_proto != nil {
		return
	}
	file_tensorflow_core_profiler_protobuf_task_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_tensorflow_core_profiler_protobuf_trace_events_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_trace_events_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_trace_events_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_trace_events_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tensorflow_core_profiler_protobuf_trace_events_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*TraceEvent_Name)(nil),
		(*TraceEvent_NameRef)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tensorflow_core_profiler_protobuf_trace_events_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tensorflow_core_profiler_protobuf_trace_events_proto_goTypes,
		DependencyIndexes: file_tensorflow_core_profiler_protobuf_trace_events_proto_depIdxs,
		EnumInfos:         file_tensorflow_core_profiler_protobuf_trace_events_proto_enumTypes,
		MessageInfos:      file_tensorflow_core_profiler_protobuf_trace_events_proto_msgTypes,
	}.Build()
	File_tensorflow_core_profiler_protobuf_trace_events_proto = out.File
	file_tensorflow_core_profiler_protobuf_trace_events_proto_rawDesc = nil
	file_tensorflow_core_profiler_protobuf_trace_events_proto_goTypes = nil
	file_tensorflow_core_profiler_protobuf_trace_events_proto_depIdxs = nil
}
