// Describes a task that profiler traced.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: tensorflow/core/profiler/protobuf/task.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 'Task' contains information about a task that profiler traced.
type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The most recent changelist number from the client that built the binary.
	Changelist *int32 `protobuf:"varint,1,opt,name=changelist" json:"changelist,omitempty"`
	// True if the client that built the binary was mint (no local changes).
	CleanBuild *bool `protobuf:"varint,2,opt,name=clean_build,json=cleanBuild" json:"clean_build,omitempty"`
	// Build time (in ns relative to the Unix epoch).
	BuildTime *int64 `protobuf:"varint,3,opt,name=build_time,json=buildTime" json:"build_time,omitempty"`
	// Build target for the binary.
	BuildTarget *string `protobuf:"bytes,4,opt,name=build_target,json=buildTarget" json:"build_target,omitempty"`
	// The full command line used to invoke the task.
	CommandLine *string `protobuf:"bytes,5,opt,name=command_line,json=commandLine" json:"command_line,omitempty"`
	// Start time of the task (in ns relative to the Unix epoch).
	StartTime *int64 `protobuf:"varint,6,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	// Task address specified by client at time of profiling request.
	TaskAddress *string `protobuf:"bytes,7,opt,name=task_address,json=taskAddress" json:"task_address,omitempty"`
	// Profiling start walltime (in ns).
	ProfileTimeNs *uint64 `protobuf:"varint,8,opt,name=profile_time_ns,json=profileTimeNs" json:"profile_time_ns,omitempty"`
	// Profiling duration (in ms).
	ProfileDurationMs *uint32 `protobuf:"varint,9,opt,name=profile_duration_ms,json=profileDurationMs" json:"profile_duration_ms,omitempty"`
	// Host trace level.
	HostTraceLevel *uint32 `protobuf:"varint,10,opt,name=host_trace_level,json=hostTraceLevel" json:"host_trace_level,omitempty"`
	// Hardware core frequency.
	TensorCoreFreqHz *uint64  `protobuf:"varint,11,opt,name=tensor_core_freq_hz,json=tensorCoreFreqHz" json:"tensor_core_freq_hz,omitempty"`
	SparseCoreFreqHz *uint64  `protobuf:"varint,12,opt,name=sparse_core_freq_hz,json=sparseCoreFreqHz" json:"sparse_core_freq_hz,omitempty"`
	GtcFreqHz        *uint64  `protobuf:"varint,13,opt,name=gtc_freq_hz,json=gtcFreqHz" json:"gtc_freq_hz,omitempty"`
	PeakMemoryUsage  *uint64  `protobuf:"varint,14,opt,name=peak_memory_usage,json=peakMemoryUsage" json:"peak_memory_usage,omitempty"`
	CpuLimit         *float64 `protobuf:"fixed64,15,opt,name=cpu_limit,json=cpuLimit" json:"cpu_limit,omitempty"`
	CpuUsage         *float64 `protobuf:"fixed64,16,opt,name=cpu_usage,json=cpuUsage" json:"cpu_usage,omitempty"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_task_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_task_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_task_proto_rawDescGZIP(), []int{0}
}

func (x *Task) GetChangelist() int32 {
	if x != nil && x.Changelist != nil {
		return *x.Changelist
	}
	return 0
}

func (x *Task) GetCleanBuild() bool {
	if x != nil && x.CleanBuild != nil {
		return *x.CleanBuild
	}
	return false
}

func (x *Task) GetBuildTime() int64 {
	if x != nil && x.BuildTime != nil {
		return *x.BuildTime
	}
	return 0
}

func (x *Task) GetBuildTarget() string {
	if x != nil && x.BuildTarget != nil {
		return *x.BuildTarget
	}
	return ""
}

func (x *Task) GetCommandLine() string {
	if x != nil && x.CommandLine != nil {
		return *x.CommandLine
	}
	return ""
}

func (x *Task) GetStartTime() int64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *Task) GetTaskAddress() string {
	if x != nil && x.TaskAddress != nil {
		return *x.TaskAddress
	}
	return ""
}

func (x *Task) GetProfileTimeNs() uint64 {
	if x != nil && x.ProfileTimeNs != nil {
		return *x.ProfileTimeNs
	}
	return 0
}

func (x *Task) GetProfileDurationMs() uint32 {
	if x != nil && x.ProfileDurationMs != nil {
		return *x.ProfileDurationMs
	}
	return 0
}

func (x *Task) GetHostTraceLevel() uint32 {
	if x != nil && x.HostTraceLevel != nil {
		return *x.HostTraceLevel
	}
	return 0
}

func (x *Task) GetTensorCoreFreqHz() uint64 {
	if x != nil && x.TensorCoreFreqHz != nil {
		return *x.TensorCoreFreqHz
	}
	return 0
}

func (x *Task) GetSparseCoreFreqHz() uint64 {
	if x != nil && x.SparseCoreFreqHz != nil {
		return *x.SparseCoreFreqHz
	}
	return 0
}

func (x *Task) GetGtcFreqHz() uint64 {
	if x != nil && x.GtcFreqHz != nil {
		return *x.GtcFreqHz
	}
	return 0
}

func (x *Task) GetPeakMemoryUsage() uint64 {
	if x != nil && x.PeakMemoryUsage != nil {
		return *x.PeakMemoryUsage
	}
	return 0
}

func (x *Task) GetCpuLimit() float64 {
	if x != nil && x.CpuLimit != nil {
		return *x.CpuLimit
	}
	return 0
}

func (x *Task) GetCpuUsage() float64 {
	if x != nil && x.CpuUsage != nil {
		return *x.CpuUsage
	}
	return 0
}

var File_tensorflow_core_profiler_protobuf_task_proto protoreflect.FileDescriptor

var file_tensorflow_core_profiler_protobuf_task_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13,
	0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x72, 0x22, 0xd4, 0x04, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69,
	0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4e, 0x73, 0x12, 0x2e, 0x0a, 0x13,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x28, 0x0a, 0x10,
	0x68, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x68, 0x6f, 0x73, 0x74, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2d, 0x0a, 0x13, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x5f, 0x68, 0x7a, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x10, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x43, 0x6f, 0x72, 0x65, 0x46,
	0x72, 0x65, 0x71, 0x48, 0x7a, 0x12, 0x2d, 0x0a, 0x13, 0x73, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f,
	0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x5f, 0x68, 0x7a, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x10, 0x73, 0x70, 0x61, 0x72, 0x73, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x46, 0x72,
	0x65, 0x71, 0x48, 0x7a, 0x12, 0x1e, 0x0a, 0x0b, 0x67, 0x74, 0x63, 0x5f, 0x66, 0x72, 0x65, 0x71,
	0x5f, 0x68, 0x7a, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x67, 0x74, 0x63, 0x46, 0x72,
	0x65, 0x71, 0x48, 0x7a, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x70, 0x65, 0x61, 0x6b, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x70, 0x75, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x70, 0x75, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x63, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x42, 0xe1, 0x01, 0x0a, 0x17, 0x63,
	0x6f, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x42, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x4b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x61, 0x69, 0x72, 0x65, 0x6e, 0x61, 0x73, 0x2f, 0x67, 0x6f, 0x2d, 0x74, 0x66, 0x2d, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x74,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0xf8, 0x01, 0x01, 0xa2, 0x02, 0x03, 0x54, 0x50, 0x58, 0xaa, 0x02, 0x13, 0x54, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0xca,
	0x02, 0x13, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5c, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x72, 0xe2, 0x02, 0x1f, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x5c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x14, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x3a, 0x3a, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72,
}

var (
	file_tensorflow_core_profiler_protobuf_task_proto_rawDescOnce sync.Once
	file_tensorflow_core_profiler_protobuf_task_proto_rawDescData = file_tensorflow_core_profiler_protobuf_task_proto_rawDesc
)

func file_tensorflow_core_profiler_protobuf_task_proto_rawDescGZIP() []byte {
	file_tensorflow_core_profiler_protobuf_task_proto_rawDescOnce.Do(func() {
		file_tensorflow_core_profiler_protobuf_task_proto_rawDescData = protoimpl.X.CompressGZIP(file_tensorflow_core_profiler_protobuf_task_proto_rawDescData)
	})
	return file_tensorflow_core_profiler_protobuf_task_proto_rawDescData
}

var file_tensorflow_core_profiler_protobuf_task_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_tensorflow_core_profiler_protobuf_task_proto_goTypes = []interface{}{
	(*Task)(nil), // 0: tensorflow.profiler.Task
}
var file_tensorflow_core_profiler_protobuf_task_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_tensorflow_core_profiler_protobuf_task_proto_init() }
func file_tensorflow_core_profiler_protobuf_task_proto_init() {
	if File_tensorflow_core_profiler_protobuf_task_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tensorflow_core_profiler_protobuf_task_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tensorflow_core_profiler_protobuf_task_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tensorflow_core_profiler_protobuf_task_proto_goTypes,
		DependencyIndexes: file_tensorflow_core_profiler_protobuf_task_proto_depIdxs,
		MessageInfos:      file_tensorflow_core_profiler_protobuf_task_proto_msgTypes,
	}.Build()
	File_tensorflow_core_profiler_protobuf_task_proto = out.File
	file_tensorflow_core_profiler_protobuf_task_proto_rawDesc = nil
	file_tensorflow_core_profiler_protobuf_task_proto_goTypes = nil
	file_tensorflow_core_profiler_protobuf_task_proto_depIdxs = nil
}
