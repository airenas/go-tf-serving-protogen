// Copyright 2023 The TensorFlow Authors. All Rights Reserved.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//==============================================================================

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: tensorflow/compiler/xla/python/ifrt/sharding.proto

package ifrt

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Wire format for `SingleDeviceSharding`.
type SingleDeviceShardingProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Serialization and deserialization are expected to ensure that device ids
	// are stable across proto construction and consumption.
	DeviceId   int32   `protobuf:"varint,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	MemoryKind *string `protobuf:"bytes,2,opt,name=memory_kind,json=memoryKind,proto3,oneof" json:"memory_kind,omitempty"`
}

func (x *SingleDeviceShardingProto) Reset() {
	*x = SingleDeviceShardingProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xla_python_ifrt_sharding_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleDeviceShardingProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleDeviceShardingProto) ProtoMessage() {}

func (x *SingleDeviceShardingProto) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xla_python_ifrt_sharding_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleDeviceShardingProto.ProtoReflect.Descriptor instead.
func (*SingleDeviceShardingProto) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_python_ifrt_sharding_proto_rawDescGZIP(), []int{0}
}

func (x *SingleDeviceShardingProto) GetDeviceId() int32 {
	if x != nil {
		return x.DeviceId
	}
	return 0
}

func (x *SingleDeviceShardingProto) GetMemoryKind() string {
	if x != nil && x.MemoryKind != nil {
		return *x.MemoryKind
	}
	return ""
}

// Wire format for `OpaqueSharding`.
type OpaqueShardingProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Devices    *DeviceListProto `protobuf:"bytes,1,opt,name=devices,proto3" json:"devices,omitempty"`
	MemoryKind *string          `protobuf:"bytes,2,opt,name=memory_kind,json=memoryKind,proto3,oneof" json:"memory_kind,omitempty"`
}

func (x *OpaqueShardingProto) Reset() {
	*x = OpaqueShardingProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xla_python_ifrt_sharding_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpaqueShardingProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpaqueShardingProto) ProtoMessage() {}

func (x *OpaqueShardingProto) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xla_python_ifrt_sharding_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpaqueShardingProto.ProtoReflect.Descriptor instead.
func (*OpaqueShardingProto) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_python_ifrt_sharding_proto_rawDescGZIP(), []int{1}
}

func (x *OpaqueShardingProto) GetDevices() *DeviceListProto {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *OpaqueShardingProto) GetMemoryKind() string {
	if x != nil && x.MemoryKind != nil {
		return *x.MemoryKind
	}
	return ""
}

// Wire format for `ConcreteSharding`.
type ConcreteShardingProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Devices     *DeviceListProto `protobuf:"bytes,1,opt,name=devices,proto3" json:"devices,omitempty"`
	MemoryKind  *string          `protobuf:"bytes,4,opt,name=memory_kind,json=memoryKind,proto3,oneof" json:"memory_kind,omitempty"`
	Shape       *ShapeProto      `protobuf:"bytes,2,opt,name=shape,proto3" json:"shape,omitempty"`
	ShardShapes []*ShapeProto    `protobuf:"bytes,3,rep,name=shard_shapes,json=shardShapes,proto3" json:"shard_shapes,omitempty"`
}

func (x *ConcreteShardingProto) Reset() {
	*x = ConcreteShardingProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xla_python_ifrt_sharding_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConcreteShardingProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConcreteShardingProto) ProtoMessage() {}

func (x *ConcreteShardingProto) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xla_python_ifrt_sharding_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConcreteShardingProto.ProtoReflect.Descriptor instead.
func (*ConcreteShardingProto) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_python_ifrt_sharding_proto_rawDescGZIP(), []int{2}
}

func (x *ConcreteShardingProto) GetDevices() *DeviceListProto {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *ConcreteShardingProto) GetMemoryKind() string {
	if x != nil && x.MemoryKind != nil {
		return *x.MemoryKind
	}
	return ""
}

func (x *ConcreteShardingProto) GetShape() *ShapeProto {
	if x != nil {
		return x.Shape
	}
	return nil
}

func (x *ConcreteShardingProto) GetShardShapes() []*ShapeProto {
	if x != nil {
		return x.ShardShapes
	}
	return nil
}

// Wire format for `ConcreteEvenSharding`.
type ConcreteEvenShardingProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Devices    *DeviceListProto `protobuf:"bytes,1,opt,name=devices,proto3" json:"devices,omitempty"`
	MemoryKind *string          `protobuf:"bytes,4,opt,name=memory_kind,json=memoryKind,proto3,oneof" json:"memory_kind,omitempty"`
	Shape      *ShapeProto      `protobuf:"bytes,2,opt,name=shape,proto3" json:"shape,omitempty"`
	ShardShape *ShapeProto      `protobuf:"bytes,3,opt,name=shard_shape,json=shardShape,proto3" json:"shard_shape,omitempty"`
}

func (x *ConcreteEvenShardingProto) Reset() {
	*x = ConcreteEvenShardingProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xla_python_ifrt_sharding_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConcreteEvenShardingProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConcreteEvenShardingProto) ProtoMessage() {}

func (x *ConcreteEvenShardingProto) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xla_python_ifrt_sharding_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConcreteEvenShardingProto.ProtoReflect.Descriptor instead.
func (*ConcreteEvenShardingProto) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_python_ifrt_sharding_proto_rawDescGZIP(), []int{3}
}

func (x *ConcreteEvenShardingProto) GetDevices() *DeviceListProto {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *ConcreteEvenShardingProto) GetMemoryKind() string {
	if x != nil && x.MemoryKind != nil {
		return *x.MemoryKind
	}
	return ""
}

func (x *ConcreteEvenShardingProto) GetShape() *ShapeProto {
	if x != nil {
		return x.Shape
	}
	return nil
}

func (x *ConcreteEvenShardingProto) GetShardShape() *ShapeProto {
	if x != nil {
		return x.ShardShape
	}
	return nil
}

var File_tensorflow_compiler_xla_python_ifrt_sharding_proto protoreflect.FileDescriptor

var file_tensorflow_compiler_xla_python_ifrt_sharding_proto_rawDesc = []byte{
	0x0a, 0x32, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x69, 0x6c, 0x65, 0x72, 0x2f, 0x78, 0x6c, 0x61, 0x2f, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e,
	0x2f, 0x69, 0x66, 0x72, 0x74, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x78, 0x6c, 0x61, 0x2e, 0x69, 0x66, 0x72, 0x74, 0x1a, 0x2f,
	0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x69,
	0x6c, 0x65, 0x72, 0x2f, 0x78, 0x6c, 0x61, 0x2f, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x69,
	0x66, 0x72, 0x74, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x6e, 0x0a, 0x19, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0b, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4b, 0x69, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x22,
	0x80, 0x01, 0x0a, 0x13, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x69,
	0x66, 0x72, 0x74, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0b,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4b, 0x69, 0x6e, 0x64, 0x88,
	0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6b, 0x69,
	0x6e, 0x64, 0x22, 0xe7, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x63, 0x72, 0x65, 0x74, 0x65, 0x53,
	0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x33, 0x0a, 0x07,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x78, 0x6c, 0x61, 0x2e, 0x69, 0x66, 0x72, 0x74, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x12, 0x24, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x4b, 0x69, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x69, 0x66, 0x72,
	0x74, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x73, 0x68,
	0x61, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x68, 0x61,
	0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x78, 0x6c, 0x61, 0x2e,
	0x69, 0x66, 0x72, 0x74, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x0b, 0x73, 0x68, 0x61, 0x72, 0x64, 0x53, 0x68, 0x61, 0x70, 0x65, 0x73, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0xe9, 0x01, 0x0a,
	0x19, 0x43, 0x6f, 0x6e, 0x63, 0x72, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x53, 0x68, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x78, 0x6c,
	0x61, 0x2e, 0x69, 0x66, 0x72, 0x74, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12,
	0x24, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4b, 0x69,
	0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x69, 0x66, 0x72, 0x74, 0x2e,
	0x53, 0x68, 0x61, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x73, 0x68, 0x61, 0x70,
	0x65, 0x12, 0x35, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x69, 0x66, 0x72,
	0x74, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0a, 0x73, 0x68,
	0x61, 0x72, 0x64, 0x53, 0x68, 0x61, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x42, 0xad, 0x01, 0x0a, 0x0c, 0x63, 0x6f, 0x6d,
	0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x69, 0x66, 0x72, 0x74, 0x42, 0x0d, 0x53, 0x68, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4d, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x69, 0x72, 0x65, 0x6e, 0x61, 0x73, 0x2f, 0x67,
	0x6f, 0x2d, 0x74, 0x66, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x2f, 0x78, 0x6c, 0x61, 0x2f, 0x70, 0x79,
	0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x69, 0x66, 0x72, 0x74, 0xa2, 0x02, 0x03, 0x58, 0x49, 0x58, 0xaa,
	0x02, 0x08, 0x58, 0x6c, 0x61, 0x2e, 0x49, 0x66, 0x72, 0x74, 0xca, 0x02, 0x08, 0x58, 0x6c, 0x61,
	0x5c, 0x49, 0x66, 0x72, 0x74, 0xe2, 0x02, 0x14, 0x58, 0x6c, 0x61, 0x5c, 0x49, 0x66, 0x72, 0x74,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x09, 0x58,
	0x6c, 0x61, 0x3a, 0x3a, 0x49, 0x66, 0x72, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tensorflow_compiler_xla_python_ifrt_sharding_proto_rawDescOnce sync.Once
	file_tensorflow_compiler_xla_python_ifrt_sharding_proto_rawDescData = file_tensorflow_compiler_xla_python_ifrt_sharding_proto_rawDesc
)

func file_tensorflow_compiler_xla_python_ifrt_sharding_proto_rawDescGZIP() []byte {
	file_tensorflow_compiler_xla_python_ifrt_sharding_proto_rawDescOnce.Do(func() {
		file_tensorflow_compiler_xla_python_ifrt_sharding_proto_rawDescData = protoimpl.X.CompressGZIP(file_tensorflow_compiler_xla_python_ifrt_sharding_proto_rawDescData)
	})
	return file_tensorflow_compiler_xla_python_ifrt_sharding_proto_rawDescData
}

var file_tensorflow_compiler_xla_python_ifrt_sharding_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_tensorflow_compiler_xla_python_ifrt_sharding_proto_goTypes = []interface{}{
	(*SingleDeviceShardingProto)(nil), // 0: xla.ifrt.SingleDeviceShardingProto
	(*OpaqueShardingProto)(nil),       // 1: xla.ifrt.OpaqueShardingProto
	(*ConcreteShardingProto)(nil),     // 2: xla.ifrt.ConcreteShardingProto
	(*ConcreteEvenShardingProto)(nil), // 3: xla.ifrt.ConcreteEvenShardingProto
	(*DeviceListProto)(nil),           // 4: xla.ifrt.DeviceListProto
	(*ShapeProto)(nil),                // 5: xla.ifrt.ShapeProto
}
var file_tensorflow_compiler_xla_python_ifrt_sharding_proto_depIdxs = []int32{
	4, // 0: xla.ifrt.OpaqueShardingProto.devices:type_name -> xla.ifrt.DeviceListProto
	4, // 1: xla.ifrt.ConcreteShardingProto.devices:type_name -> xla.ifrt.DeviceListProto
	5, // 2: xla.ifrt.ConcreteShardingProto.shape:type_name -> xla.ifrt.ShapeProto
	5, // 3: xla.ifrt.ConcreteShardingProto.shard_shapes:type_name -> xla.ifrt.ShapeProto
	4, // 4: xla.ifrt.ConcreteEvenShardingProto.devices:type_name -> xla.ifrt.DeviceListProto
	5, // 5: xla.ifrt.ConcreteEvenShardingProto.shape:type_name -> xla.ifrt.ShapeProto
	5, // 6: xla.ifrt.ConcreteEvenShardingProto.shard_shape:type_name -> xla.ifrt.ShapeProto
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_tensorflow_compiler_xla_python_ifrt_sharding_proto_init() }
func file_tensorflow_compiler_xla_python_ifrt_sharding_proto_init() {
	if File_tensorflow_compiler_xla_python_ifrt_sharding_proto != nil {
		return
	}
	file_tensorflow_compiler_xla_python_ifrt_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_tensorflow_compiler_xla_python_ifrt_sharding_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleDeviceShardingProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xla_python_ifrt_sharding_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpaqueShardingProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xla_python_ifrt_sharding_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConcreteShardingProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xla_python_ifrt_sharding_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConcreteEvenShardingProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tensorflow_compiler_xla_python_ifrt_sharding_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_tensorflow_compiler_xla_python_ifrt_sharding_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_tensorflow_compiler_xla_python_ifrt_sharding_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_tensorflow_compiler_xla_python_ifrt_sharding_proto_msgTypes[3].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tensorflow_compiler_xla_python_ifrt_sharding_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tensorflow_compiler_xla_python_ifrt_sharding_proto_goTypes,
		DependencyIndexes: file_tensorflow_compiler_xla_python_ifrt_sharding_proto_depIdxs,
		MessageInfos:      file_tensorflow_compiler_xla_python_ifrt_sharding_proto_msgTypes,
	}.Build()
	File_tensorflow_compiler_xla_python_ifrt_sharding_proto = out.File
	file_tensorflow_compiler_xla_python_ifrt_sharding_proto_rawDesc = nil
	file_tensorflow_compiler_xla_python_ifrt_sharding_proto_goTypes = nil
	file_tensorflow_compiler_xla_python_ifrt_sharding_proto_depIdxs = nil
}
