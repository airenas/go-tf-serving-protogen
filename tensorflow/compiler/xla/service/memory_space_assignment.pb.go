// Copyright 2023 The TensorFlow Authors. All Rights Reserved.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//==============================================================================

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: tensorflow/compiler/xla/service/memory_space_assignment.proto

package service

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Memory space assignment options for slicing prefetches into smaller
// asynchronous copies, reducing prefetch memory allocation pressure.
//
// No prefetch slicing is performed if max_slices == 0.
//
// TODO(b/275905276): Consider adding another option that indicates that we want
// slices of a certain size, rather than just always creating max_slices.
type SlicedPrefetchOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of slices into which to slice a prefetch.
	MaxSlices uint32 `protobuf:"varint,1,opt,name=max_slices,json=maxSlices,proto3" json:"max_slices,omitempty"`
	// The minimum tensor size in bytes that we will attempt to slice.
	MinBytes uint64 `protobuf:"varint,2,opt,name=min_bytes,json=minBytes,proto3" json:"min_bytes,omitempty"`
	// This option should never be set to true in production. When this is true,
	// we will crash if we propose a slice (other than the final slice) with a
	// size that is not a multiple of the required hardware alignment. Otherwise,
	// we will choose not to slice such situations, which is always safe.
	FailOnNonAlignmentBoundarySliceProposal bool `protobuf:"varint,3,opt,name=fail_on_non_alignment_boundary_slice_proposal,json=failOnNonAlignmentBoundarySliceProposal,proto3" json:"fail_on_non_alignment_boundary_slice_proposal,omitempty"`
}

func (x *SlicedPrefetchOptions) Reset() {
	*x = SlicedPrefetchOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xla_service_memory_space_assignment_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlicedPrefetchOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlicedPrefetchOptions) ProtoMessage() {}

func (x *SlicedPrefetchOptions) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xla_service_memory_space_assignment_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlicedPrefetchOptions.ProtoReflect.Descriptor instead.
func (*SlicedPrefetchOptions) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_service_memory_space_assignment_proto_rawDescGZIP(), []int{0}
}

func (x *SlicedPrefetchOptions) GetMaxSlices() uint32 {
	if x != nil {
		return x.MaxSlices
	}
	return 0
}

func (x *SlicedPrefetchOptions) GetMinBytes() uint64 {
	if x != nil {
		return x.MinBytes
	}
	return 0
}

func (x *SlicedPrefetchOptions) GetFailOnNonAlignmentBoundarySliceProposal() bool {
	if x != nil {
		return x.FailOnNonAlignmentBoundarySliceProposal
	}
	return false
}

// Options for memory-bound loop optimizations in memory space assignment. If
// enabled, this pass can optimize memory-bound unrolled loops to maximize the
// bandwidth utilized and minimize the execution time.
type MemoryBoundLoopOptimizerOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enable the memory-bound loop optimizations.
	Enabled *bool `protobuf:"varint,1,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	// The desired ratio of overlapped operations that is sufficient to overlap
	// prefetches with. If this value is 1, the algorithm will try to fully
	// overlap the prefetches with other compute, if less than 1, the algorithm
	// may schedule prefetches such that some of the prefetch is not overlapped,
	// so may become critical. For example, if this value is 0.5, we are willing
	// for the prefetch time to take up to 2X of the overlapped computation time.
	DesiredCopyRatio *float32 `protobuf:"fixed32,2,opt,name=desired_copy_ratio,json=desiredCopyRatio,proto3,oneof" json:"desired_copy_ratio,omitempty"`
	// If true, the algorithm allows a fully pipelined prefetch to be scheduled
	// even if the copy resources haven't reached the desired copy ratio. A fully
	// pipelined prefetch starts the same time as its counterpart in the previous
	// iteration finishes.
	AllowUnsatisfiedFullyPipelinedPrefetch *bool `protobuf:"varint,3,opt,name=allow_unsatisfied_fully_pipelined_prefetch,json=allowUnsatisfiedFullyPipelinedPrefetch,proto3,oneof" json:"allow_unsatisfied_fully_pipelined_prefetch,omitempty"`
}

func (x *MemoryBoundLoopOptimizerOptions) Reset() {
	*x = MemoryBoundLoopOptimizerOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xla_service_memory_space_assignment_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoryBoundLoopOptimizerOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryBoundLoopOptimizerOptions) ProtoMessage() {}

func (x *MemoryBoundLoopOptimizerOptions) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xla_service_memory_space_assignment_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryBoundLoopOptimizerOptions.ProtoReflect.Descriptor instead.
func (*MemoryBoundLoopOptimizerOptions) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_service_memory_space_assignment_proto_rawDescGZIP(), []int{1}
}

func (x *MemoryBoundLoopOptimizerOptions) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *MemoryBoundLoopOptimizerOptions) GetDesiredCopyRatio() float32 {
	if x != nil && x.DesiredCopyRatio != nil {
		return *x.DesiredCopyRatio
	}
	return 0
}

func (x *MemoryBoundLoopOptimizerOptions) GetAllowUnsatisfiedFullyPipelinedPrefetch() bool {
	if x != nil && x.AllowUnsatisfiedFullyPipelinedPrefetch != nil {
		return *x.AllowUnsatisfiedFullyPipelinedPrefetch
	}
	return false
}

var File_tensorflow_compiler_xla_service_memory_space_assignment_proto protoreflect.FileDescriptor

var file_tensorflow_compiler_xla_service_memory_space_assignment_proto_rawDesc = []byte{
	0x0a, 0x3d, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x69, 0x6c, 0x65, 0x72, 0x2f, 0x78, 0x6c, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1b, 0x78, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xb3, 0x01, 0x0a,
	0x15, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x64, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x6c,
	0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x53,
	0x6c, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x5e, 0x0a, 0x2d, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f,
	0x6e, 0x5f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x27, 0x66, 0x61, 0x69, 0x6c, 0x4f,
	0x6e, 0x4e, 0x6f, 0x6e, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x22, 0xa6, 0x02, 0x0a, 0x1f, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x4c, 0x6f, 0x6f, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x63, 0x6f, 0x70, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x48, 0x01, 0x52, 0x10, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x70, 0x79,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x5f, 0x0a, 0x2a, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x5f, 0x75, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x73, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x66, 0x75,
	0x6c, 0x6c, 0x79, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x26,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x73, 0x66, 0x69, 0x65, 0x64,
	0x46, 0x75, 0x6c, 0x6c, 0x79, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x64, 0x50, 0x72,
	0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x63, 0x6f, 0x70, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x2d, 0x0a, 0x2b,
	0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x75, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x73, 0x66, 0x69,
	0x65, 0x64, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x42, 0x8d, 0x02, 0x0a, 0x1f,
	0x63, 0x6f, 0x6d, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x1a, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x70, 0x61, 0x63, 0x65, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x49, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x69, 0x72, 0x65, 0x6e, 0x61,
	0x73, 0x2f, 0x67, 0x6f, 0x2d, 0x74, 0x66, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2d,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x2f, 0x78, 0x6c, 0x61,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0xa2, 0x02, 0x03, 0x58, 0x4d, 0x58, 0xaa, 0x02,
	0x19, 0x58, 0x6c, 0x61, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0xca, 0x02, 0x19, 0x58, 0x6c, 0x61,
	0x5c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x70, 0x61, 0x63, 0x65, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0xe2, 0x02, 0x25, 0x58, 0x6c, 0x61, 0x5c, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x53, 0x70, 0x61, 0x63, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x1a, 0x58, 0x6c, 0x61, 0x3a, 0x3a, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_tensorflow_compiler_xla_service_memory_space_assignment_proto_rawDescOnce sync.Once
	file_tensorflow_compiler_xla_service_memory_space_assignment_proto_rawDescData = file_tensorflow_compiler_xla_service_memory_space_assignment_proto_rawDesc
)

func file_tensorflow_compiler_xla_service_memory_space_assignment_proto_rawDescGZIP() []byte {
	file_tensorflow_compiler_xla_service_memory_space_assignment_proto_rawDescOnce.Do(func() {
		file_tensorflow_compiler_xla_service_memory_space_assignment_proto_rawDescData = protoimpl.X.CompressGZIP(file_tensorflow_compiler_xla_service_memory_space_assignment_proto_rawDescData)
	})
	return file_tensorflow_compiler_xla_service_memory_space_assignment_proto_rawDescData
}

var file_tensorflow_compiler_xla_service_memory_space_assignment_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_tensorflow_compiler_xla_service_memory_space_assignment_proto_goTypes = []interface{}{
	(*SlicedPrefetchOptions)(nil),           // 0: xla.memory_space_assignment.SlicedPrefetchOptions
	(*MemoryBoundLoopOptimizerOptions)(nil), // 1: xla.memory_space_assignment.MemoryBoundLoopOptimizerOptions
}
var file_tensorflow_compiler_xla_service_memory_space_assignment_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_tensorflow_compiler_xla_service_memory_space_assignment_proto_init() }
func file_tensorflow_compiler_xla_service_memory_space_assignment_proto_init() {
	if File_tensorflow_compiler_xla_service_memory_space_assignment_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tensorflow_compiler_xla_service_memory_space_assignment_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlicedPrefetchOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xla_service_memory_space_assignment_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemoryBoundLoopOptimizerOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tensorflow_compiler_xla_service_memory_space_assignment_proto_msgTypes[1].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tensorflow_compiler_xla_service_memory_space_assignment_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tensorflow_compiler_xla_service_memory_space_assignment_proto_goTypes,
		DependencyIndexes: file_tensorflow_compiler_xla_service_memory_space_assignment_proto_depIdxs,
		MessageInfos:      file_tensorflow_compiler_xla_service_memory_space_assignment_proto_msgTypes,
	}.Build()
	File_tensorflow_compiler_xla_service_memory_space_assignment_proto = out.File
	file_tensorflow_compiler_xla_service_memory_space_assignment_proto_rawDesc = nil
	file_tensorflow_compiler_xla_service_memory_space_assignment_proto_goTypes = nil
	file_tensorflow_compiler_xla_service_memory_space_assignment_proto_depIdxs = nil
}
