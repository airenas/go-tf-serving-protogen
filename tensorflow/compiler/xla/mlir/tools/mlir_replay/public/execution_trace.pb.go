// Copyright 2022 The TensorFlow Authors. All Rights Reserved.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//==============================================================================

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: tensorflow/compiler/xla/mlir/tools/mlir_replay/public/execution_trace.proto

package public

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TracedValue_ElementType int32

const (
	TracedValue_UNKNOWN  TracedValue_ElementType = 0
	TracedValue_INTEGRAL TracedValue_ElementType = 1
	TracedValue_UNSIGNED TracedValue_ElementType = 2
	TracedValue_FLOAT    TracedValue_ElementType = 3
	TracedValue_COMPLEX  TracedValue_ElementType = 4
	TracedValue_TUPLE    TracedValue_ElementType = 5
)

// Enum value maps for TracedValue_ElementType.
var (
	TracedValue_ElementType_name = map[int32]string{
		0: "UNKNOWN",
		1: "INTEGRAL",
		2: "UNSIGNED",
		3: "FLOAT",
		4: "COMPLEX",
		5: "TUPLE",
	}
	TracedValue_ElementType_value = map[string]int32{
		"UNKNOWN":  0,
		"INTEGRAL": 1,
		"UNSIGNED": 2,
		"FLOAT":    3,
		"COMPLEX":  4,
		"TUPLE":    5,
	}
)

func (x TracedValue_ElementType) Enum() *TracedValue_ElementType {
	p := new(TracedValue_ElementType)
	*p = x
	return p
}

func (x TracedValue_ElementType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TracedValue_ElementType) Descriptor() protoreflect.EnumDescriptor {
	return file_tensorflow_compiler_xla_mlir_tools_mlir_replay_public_execution_trace_proto_enumTypes[0].Descriptor()
}

func (TracedValue_ElementType) Type() protoreflect.EnumType {
	return &file_tensorflow_compiler_xla_mlir_tools_mlir_replay_public_execution_trace_proto_enumTypes[0]
}

func (x TracedValue_ElementType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TracedValue_ElementType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TracedValue_ElementType(num)
	return nil
}

// Deprecated: Use TracedValue_ElementType.Descriptor instead.
func (TracedValue_ElementType) EnumDescriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_mlir_tools_mlir_replay_public_execution_trace_proto_rawDescGZIP(), []int{0, 0}
}

type TracedValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The shape - includes vector dimensions.
	// TODO(jreiffers): Model vector dimensions separately.
	Shape         []int64                  `protobuf:"varint,1,rep,name=shape" json:"shape,omitempty"`
	IsScalar      *bool                    `protobuf:"varint,2,opt,name=is_scalar,json=isScalar" json:"is_scalar,omitempty"`
	BitWidth      *int32                   `protobuf:"varint,3,opt,name=bit_width,json=bitWidth" json:"bit_width,omitempty"`
	ElementType   *TracedValue_ElementType `protobuf:"varint,4,opt,name=element_type,json=elementType,enum=mlir.interpreter.TracedValue_ElementType" json:"element_type,omitempty"`
	Floats        []float32                `protobuf:"fixed32,5,rep,packed,name=floats" json:"floats,omitempty"`
	Doubles       []float64                `protobuf:"fixed64,6,rep,packed,name=doubles" json:"doubles,omitempty"`
	Ints          []int64                  `protobuf:"varint,7,rep,packed,name=ints" json:"ints,omitempty"`
	Uints         []uint64                 `protobuf:"varint,8,rep,packed,name=uints" json:"uints,omitempty"`
	TupleElements []*TracedValue           `protobuf:"bytes,9,rep,name=tuple_elements,json=tupleElements" json:"tuple_elements,omitempty"`
}

func (x *TracedValue) Reset() {
	*x = TracedValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xla_mlir_tools_mlir_replay_public_execution_trace_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TracedValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracedValue) ProtoMessage() {}

func (x *TracedValue) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xla_mlir_tools_mlir_replay_public_execution_trace_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracedValue.ProtoReflect.Descriptor instead.
func (*TracedValue) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_mlir_tools_mlir_replay_public_execution_trace_proto_rawDescGZIP(), []int{0}
}

func (x *TracedValue) GetShape() []int64 {
	if x != nil {
		return x.Shape
	}
	return nil
}

func (x *TracedValue) GetIsScalar() bool {
	if x != nil && x.IsScalar != nil {
		return *x.IsScalar
	}
	return false
}

func (x *TracedValue) GetBitWidth() int32 {
	if x != nil && x.BitWidth != nil {
		return *x.BitWidth
	}
	return 0
}

func (x *TracedValue) GetElementType() TracedValue_ElementType {
	if x != nil && x.ElementType != nil {
		return *x.ElementType
	}
	return TracedValue_UNKNOWN
}

func (x *TracedValue) GetFloats() []float32 {
	if x != nil {
		return x.Floats
	}
	return nil
}

func (x *TracedValue) GetDoubles() []float64 {
	if x != nil {
		return x.Doubles
	}
	return nil
}

func (x *TracedValue) GetInts() []int64 {
	if x != nil {
		return x.Ints
	}
	return nil
}

func (x *TracedValue) GetUints() []uint64 {
	if x != nil {
		return x.Uints
	}
	return nil
}

func (x *TracedValue) GetTupleElements() []*TracedValue {
	if x != nil {
		return x.TupleElements
	}
	return nil
}

type InstructionTrace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    *string        `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Args    []*TracedValue `protobuf:"bytes,2,rep,name=args" json:"args,omitempty"`
	Results []*TracedValue `protobuf:"bytes,3,rep,name=results" json:"results,omitempty"` // TODO(jreiffers): Model side effects (e.g. memref.store).
	Regions []*RegionTrace `protobuf:"bytes,4,rep,name=regions" json:"regions,omitempty"`
}

func (x *InstructionTrace) Reset() {
	*x = InstructionTrace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xla_mlir_tools_mlir_replay_public_execution_trace_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstructionTrace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstructionTrace) ProtoMessage() {}

func (x *InstructionTrace) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xla_mlir_tools_mlir_replay_public_execution_trace_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstructionTrace.ProtoReflect.Descriptor instead.
func (*InstructionTrace) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_mlir_tools_mlir_replay_public_execution_trace_proto_rawDescGZIP(), []int{1}
}

func (x *InstructionTrace) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *InstructionTrace) GetArgs() []*TracedValue {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *InstructionTrace) GetResults() []*TracedValue {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *InstructionTrace) GetRegions() []*RegionTrace {
	if x != nil {
		return x.Regions
	}
	return nil
}

type RegionTrace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of the region that is being executed (within the parent op).
	// For example: '1' for an scf.while's `after` region.
	RegionNumber *int32 `protobuf:"varint,1,opt,name=region_number,json=regionNumber" json:"region_number,omitempty"`
	// The arguments that were passed to the region.
	Bbargs []*TracedValue `protobuf:"bytes,2,rep,name=bbargs" json:"bbargs,omitempty"`
	// One instruction per instruction in the region.
	Instructions []*InstructionTrace `protobuf:"bytes,3,rep,name=instructions" json:"instructions,omitempty"`
	Results      []*TracedValue      `protobuf:"bytes,4,rep,name=results" json:"results,omitempty"`
}

func (x *RegionTrace) Reset() {
	*x = RegionTrace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xla_mlir_tools_mlir_replay_public_execution_trace_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionTrace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionTrace) ProtoMessage() {}

func (x *RegionTrace) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xla_mlir_tools_mlir_replay_public_execution_trace_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionTrace.ProtoReflect.Descriptor instead.
func (*RegionTrace) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_mlir_tools_mlir_replay_public_execution_trace_proto_rawDescGZIP(), []int{2}
}

func (x *RegionTrace) GetRegionNumber() int32 {
	if x != nil && x.RegionNumber != nil {
		return *x.RegionNumber
	}
	return 0
}

func (x *RegionTrace) GetBbargs() []*TracedValue {
	if x != nil {
		return x.Bbargs
	}
	return nil
}

func (x *RegionTrace) GetInstructions() []*InstructionTrace {
	if x != nil {
		return x.Instructions
	}
	return nil
}

func (x *RegionTrace) GetResults() []*TracedValue {
	if x != nil {
		return x.Results
	}
	return nil
}

type ExecutionTrace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The IR that was executed. Note: this should always be filled in the generic
	// format.
	Ir *string `protobuf:"bytes,1,opt,name=ir" json:"ir,omitempty"`
	// The trace of the entry function execution.
	Trace *RegionTrace `protobuf:"bytes,2,opt,name=trace" json:"trace,omitempty"`
}

func (x *ExecutionTrace) Reset() {
	*x = ExecutionTrace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xla_mlir_tools_mlir_replay_public_execution_trace_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionTrace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionTrace) ProtoMessage() {}

func (x *ExecutionTrace) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xla_mlir_tools_mlir_replay_public_execution_trace_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionTrace.ProtoReflect.Descriptor instead.
func (*ExecutionTrace) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_mlir_tools_mlir_replay_public_execution_trace_proto_rawDescGZIP(), []int{3}
}

func (x *ExecutionTrace) GetIr() string {
	if x != nil && x.Ir != nil {
		return *x.Ir
	}
	return ""
}

func (x *ExecutionTrace) GetTrace() *RegionTrace {
	if x != nil {
		return x.Trace
	}
	return nil
}

var File_tensorflow_compiler_xla_mlir_tools_mlir_replay_public_execution_trace_proto protoreflect.FileDescriptor

var file_tensorflow_compiler_xla_mlir_tools_mlir_replay_public_execution_trace_proto_rawDesc = []byte{
	0x0a, 0x4b, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x69, 0x6c, 0x65, 0x72, 0x2f, 0x78, 0x6c, 0x61, 0x2f, 0x6d, 0x6c, 0x69, 0x72, 0x2f, 0x74,
	0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x6d, 0x6c, 0x69, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79,
	0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x6d,
	0x6c, 0x69, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x22,
	0xb8, 0x03, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05,
	0x73, 0x68, 0x61, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x73, 0x63, 0x61, 0x6c,
	0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x53, 0x63, 0x61, 0x6c,
	0x61, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x69, 0x74, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x69, 0x74, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x4c, 0x0a, 0x0c, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6d, 0x6c, 0x69, 0x72, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0b, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x02, 0x42, 0x02, 0x10,
	0x01, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x07, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x01, 0x42, 0x02, 0x10, 0x01, 0x52, 0x07,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x04, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x03, 0x42, 0x02, 0x10, 0x01, 0x52, 0x04, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x18, 0x0a, 0x05, 0x75, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x04, 0x42, 0x02,
	0x10, 0x01, 0x52, 0x05, 0x75, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x0e, 0x74, 0x75, 0x70,
	0x6c, 0x65, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x6c, 0x69, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72,
	0x65, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0d, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22,
	0x59, 0x0a, 0x0b, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x49,
	0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x4e, 0x53,
	0x49, 0x47, 0x4e, 0x45, 0x44, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x4c, 0x4f, 0x41, 0x54,
	0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x58, 0x10, 0x04, 0x12,
	0x09, 0x0a, 0x05, 0x54, 0x55, 0x50, 0x4c, 0x45, 0x10, 0x05, 0x22, 0xcb, 0x01, 0x0a, 0x10, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x6c, 0x69, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72,
	0x65, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x37, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x6c, 0x69, 0x72, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12,
	0x37, 0x0a, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6d, 0x6c, 0x69, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65,
	0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52,
	0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xea, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x35, 0x0a,
	0x06, 0x62, 0x62, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6d, 0x6c, 0x69, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72,
	0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x62, 0x62,
	0x61, 0x72, 0x67, 0x73, 0x12, 0x46, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x6c, 0x69,
	0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x0c,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6d, 0x6c, 0x69, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72,
	0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x55, 0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x72, 0x12, 0x33, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x6c, 0x69, 0x72, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x42, 0xed, 0x01, 0x0a,
	0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x6c, 0x69, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x65, 0x74, 0x65, 0x72, 0x42, 0x13, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x5f, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x69, 0x72, 0x65, 0x6e, 0x61, 0x73,
	0x2f, 0x67, 0x6f, 0x2d, 0x74, 0x66, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2d, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x2f, 0x78, 0x6c, 0x61, 0x2f,
	0x6d, 0x6c, 0x69, 0x72, 0x2f, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x6d, 0x6c, 0x69, 0x72, 0x5f,
	0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0xa2, 0x02, 0x03,
	0x4d, 0x49, 0x58, 0xaa, 0x02, 0x10, 0x4d, 0x6c, 0x69, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0xca, 0x02, 0x10, 0x4d, 0x6c, 0x69, 0x72, 0x5c, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0xe2, 0x02, 0x1c, 0x4d, 0x6c, 0x69, 0x72,
	0x5c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x11, 0x4d, 0x6c, 0x69, 0x72, 0x3a,
	0x3a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72,
}

var (
	file_tensorflow_compiler_xla_mlir_tools_mlir_replay_public_execution_trace_proto_rawDescOnce sync.Once
	file_tensorflow_compiler_xla_mlir_tools_mlir_replay_public_execution_trace_proto_rawDescData = file_tensorflow_compiler_xla_mlir_tools_mlir_replay_public_execution_trace_proto_rawDesc
)

func file_tensorflow_compiler_xla_mlir_tools_mlir_replay_public_execution_trace_proto_rawDescGZIP() []byte {
	file_tensorflow_compiler_xla_mlir_tools_mlir_replay_public_execution_trace_proto_rawDescOnce.Do(func() {
		file_tensorflow_compiler_xla_mlir_tools_mlir_replay_public_execution_trace_proto_rawDescData = protoimpl.X.CompressGZIP(file_tensorflow_compiler_xla_mlir_tools_mlir_replay_public_execution_trace_proto_rawDescData)
	})
	return file_tensorflow_compiler_xla_mlir_tools_mlir_replay_public_execution_trace_proto_rawDescData
}

var file_tensorflow_compiler_xla_mlir_tools_mlir_replay_public_execution_trace_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_tensorflow_compiler_xla_mlir_tools_mlir_replay_public_execution_trace_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_tensorflow_compiler_xla_mlir_tools_mlir_replay_public_execution_trace_proto_goTypes = []interface{}{
	(TracedValue_ElementType)(0), // 0: mlir.interpreter.TracedValue.ElementType
	(*TracedValue)(nil),          // 1: mlir.interpreter.TracedValue
	(*InstructionTrace)(nil),     // 2: mlir.interpreter.InstructionTrace
	(*RegionTrace)(nil),          // 3: mlir.interpreter.RegionTrace
	(*ExecutionTrace)(nil),       // 4: mlir.interpreter.ExecutionTrace
}
var file_tensorflow_compiler_xla_mlir_tools_mlir_replay_public_execution_trace_proto_depIdxs = []int32{
	0, // 0: mlir.interpreter.TracedValue.element_type:type_name -> mlir.interpreter.TracedValue.ElementType
	1, // 1: mlir.interpreter.TracedValue.tuple_elements:type_name -> mlir.interpreter.TracedValue
	1, // 2: mlir.interpreter.InstructionTrace.args:type_name -> mlir.interpreter.TracedValue
	1, // 3: mlir.interpreter.InstructionTrace.results:type_name -> mlir.interpreter.TracedValue
	3, // 4: mlir.interpreter.InstructionTrace.regions:type_name -> mlir.interpreter.RegionTrace
	1, // 5: mlir.interpreter.RegionTrace.bbargs:type_name -> mlir.interpreter.TracedValue
	2, // 6: mlir.interpreter.RegionTrace.instructions:type_name -> mlir.interpreter.InstructionTrace
	1, // 7: mlir.interpreter.RegionTrace.results:type_name -> mlir.interpreter.TracedValue
	3, // 8: mlir.interpreter.ExecutionTrace.trace:type_name -> mlir.interpreter.RegionTrace
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_tensorflow_compiler_xla_mlir_tools_mlir_replay_public_execution_trace_proto_init() }
func file_tensorflow_compiler_xla_mlir_tools_mlir_replay_public_execution_trace_proto_init() {
	if File_tensorflow_compiler_xla_mlir_tools_mlir_replay_public_execution_trace_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tensorflow_compiler_xla_mlir_tools_mlir_replay_public_execution_trace_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TracedValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xla_mlir_tools_mlir_replay_public_execution_trace_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstructionTrace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xla_mlir_tools_mlir_replay_public_execution_trace_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionTrace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xla_mlir_tools_mlir_replay_public_execution_trace_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionTrace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tensorflow_compiler_xla_mlir_tools_mlir_replay_public_execution_trace_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tensorflow_compiler_xla_mlir_tools_mlir_replay_public_execution_trace_proto_goTypes,
		DependencyIndexes: file_tensorflow_compiler_xla_mlir_tools_mlir_replay_public_execution_trace_proto_depIdxs,
		EnumInfos:         file_tensorflow_compiler_xla_mlir_tools_mlir_replay_public_execution_trace_proto_enumTypes,
		MessageInfos:      file_tensorflow_compiler_xla_mlir_tools_mlir_replay_public_execution_trace_proto_msgTypes,
	}.Build()
	File_tensorflow_compiler_xla_mlir_tools_mlir_replay_public_execution_trace_proto = out.File
	file_tensorflow_compiler_xla_mlir_tools_mlir_replay_public_execution_trace_proto_rawDesc = nil
	file_tensorflow_compiler_xla_mlir_tools_mlir_replay_public_execution_trace_proto_goTypes = nil
	file_tensorflow_compiler_xla_mlir_tools_mlir_replay_public_execution_trace_proto_depIdxs = nil
}
