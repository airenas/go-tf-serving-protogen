// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: tensorflow/tools/proto_splitter/chunk.proto

package proto_splitter

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// List of types supported by the Merger.
type ChunkInfo_Type int32

const (
	ChunkInfo_UNSET   ChunkInfo_Type = 0
	ChunkInfo_MESSAGE ChunkInfo_Type = 1
	ChunkInfo_BYTES   ChunkInfo_Type = 2
)

// Enum value maps for ChunkInfo_Type.
var (
	ChunkInfo_Type_name = map[int32]string{
		0: "UNSET",
		1: "MESSAGE",
		2: "BYTES",
	}
	ChunkInfo_Type_value = map[string]int32{
		"UNSET":   0,
		"MESSAGE": 1,
		"BYTES":   2,
	}
)

func (x ChunkInfo_Type) Enum() *ChunkInfo_Type {
	p := new(ChunkInfo_Type)
	*p = x
	return p
}

func (x ChunkInfo_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChunkInfo_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_tensorflow_tools_proto_splitter_chunk_proto_enumTypes[0].Descriptor()
}

func (ChunkInfo_Type) Type() protoreflect.EnumType {
	return &file_tensorflow_tools_proto_splitter_chunk_proto_enumTypes[0]
}

func (x ChunkInfo_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChunkInfo_Type.Descriptor instead.
func (ChunkInfo_Type) EnumDescriptor() ([]byte, []int) {
	return file_tensorflow_tools_proto_splitter_chunk_proto_rawDescGZIP(), []int{1, 0}
}

// The ChunkMetadata is generated and saved as the last chunk when exported with
// Splitter.write(prefix). This metadata is always located in the {prefix}.cpb
// file.
type ChunkMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The version of the Splitter was used (for information purposes only), and
	// what versions of the Merger can be used to read the chunked proto.
	Version *VersionDef `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// Metadata about how/where to read the chunk data.
	Chunks []*ChunkInfo `protobuf:"bytes,2,rep,name=chunks,proto3" json:"chunks,omitempty"`
	// Recursive structural information of the proto that was passed to the
	// Splitter. Used to merge the chunked data into a single proto.
	Message *ChunkedMessage `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ChunkMetadata) Reset() {
	*x = ChunkMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_tools_proto_splitter_chunk_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkMetadata) ProtoMessage() {}

func (x *ChunkMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_tools_proto_splitter_chunk_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkMetadata.ProtoReflect.Descriptor instead.
func (*ChunkMetadata) Descriptor() ([]byte, []int) {
	return file_tensorflow_tools_proto_splitter_chunk_proto_rawDescGZIP(), []int{0}
}

func (x *ChunkMetadata) GetVersion() *VersionDef {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *ChunkMetadata) GetChunks() []*ChunkInfo {
	if x != nil {
		return x.Chunks
	}
	return nil
}

func (x *ChunkMetadata) GetMessage() *ChunkedMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

type ChunkInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   ChunkInfo_Type `protobuf:"varint,1,opt,name=type,proto3,enum=proto_splitter.ChunkInfo_Type" json:"type,omitempty"`
	Size   uint64         `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`     // Size of this chunk in bytes.
	Offset uint64         `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"` // Byte offset of this chunk.
}

func (x *ChunkInfo) Reset() {
	*x = ChunkInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_tools_proto_splitter_chunk_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkInfo) ProtoMessage() {}

func (x *ChunkInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_tools_proto_splitter_chunk_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkInfo.ProtoReflect.Descriptor instead.
func (*ChunkInfo) Descriptor() ([]byte, []int) {
	return file_tensorflow_tools_proto_splitter_chunk_proto_rawDescGZIP(), []int{1}
}

func (x *ChunkInfo) GetType() ChunkInfo_Type {
	if x != nil {
		return x.Type
	}
	return ChunkInfo_UNSET
}

func (x *ChunkInfo) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ChunkInfo) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type ChunkedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index of the ChunkInfo in ChunkMetadata.chunks.
	ChunkIndex *uint64 `protobuf:"varint,1,opt,name=chunk_index,json=chunkIndex,proto3,oneof" json:"chunk_index,omitempty"`
	// The same field can appear multiple times in this list. When this
	// happens, the parsed chunk data is merged in the order that they appear.
	// The way the field is merged depends on the type of field. e.g. Repeated
	// fields are merged by appending them, bytes are merged concatenated.
	ChunkedFields []*ChunkedField `protobuf:"bytes,2,rep,name=chunked_fields,json=chunkedFields,proto3" json:"chunked_fields,omitempty"`
}

func (x *ChunkedMessage) Reset() {
	*x = ChunkedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_tools_proto_splitter_chunk_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkedMessage) ProtoMessage() {}

func (x *ChunkedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_tools_proto_splitter_chunk_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkedMessage.ProtoReflect.Descriptor instead.
func (*ChunkedMessage) Descriptor() ([]byte, []int) {
	return file_tensorflow_tools_proto_splitter_chunk_proto_rawDescGZIP(), []int{2}
}

func (x *ChunkedMessage) GetChunkIndex() uint64 {
	if x != nil && x.ChunkIndex != nil {
		return *x.ChunkIndex
	}
	return 0
}

func (x *ChunkedMessage) GetChunkedFields() []*ChunkedField {
	if x != nil {
		return x.ChunkedFields
	}
	return nil
}

type ChunkedField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Stores the nested field numbers, which tell us where and how to merge
	// this chunk.
	// E.g. If the parent ChunkedMessage contains a GraphDef, this field value
	// could point to: `GraphDef.node[15].attr["value"].tensor.float_value`
	// Field tag = [] (empty list) indicates that the chunked message is the same
	// type as the parent. This is useful for slicing repeated fields.
	FieldTag []*FieldIndex   `protobuf:"bytes,1,rep,name=field_tag,json=fieldTag,proto3" json:"field_tag,omitempty"`
	Message  *ChunkedMessage `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"` // This allows us to build a tree of chunked
}

func (x *ChunkedField) Reset() {
	*x = ChunkedField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_tools_proto_splitter_chunk_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkedField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkedField) ProtoMessage() {}

func (x *ChunkedField) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_tools_proto_splitter_chunk_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkedField.ProtoReflect.Descriptor instead.
func (*ChunkedField) Descriptor() ([]byte, []int) {
	return file_tensorflow_tools_proto_splitter_chunk_proto_rawDescGZIP(), []int{3}
}

func (x *ChunkedField) GetFieldTag() []*FieldIndex {
	if x != nil {
		return x.FieldTag
	}
	return nil
}

func (x *ChunkedField) GetMessage() *ChunkedMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

type FieldIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//
	//	*FieldIndex_Field
	//	*FieldIndex_MapKey_
	//	*FieldIndex_Index
	Kind isFieldIndex_Kind `protobuf_oneof:"kind"`
}

func (x *FieldIndex) Reset() {
	*x = FieldIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_tools_proto_splitter_chunk_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldIndex) ProtoMessage() {}

func (x *FieldIndex) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_tools_proto_splitter_chunk_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldIndex.ProtoReflect.Descriptor instead.
func (*FieldIndex) Descriptor() ([]byte, []int) {
	return file_tensorflow_tools_proto_splitter_chunk_proto_rawDescGZIP(), []int{4}
}

func (m *FieldIndex) GetKind() isFieldIndex_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *FieldIndex) GetField() uint32 {
	if x, ok := x.GetKind().(*FieldIndex_Field); ok {
		return x.Field
	}
	return 0
}

func (x *FieldIndex) GetMapKey() *FieldIndex_MapKey {
	if x, ok := x.GetKind().(*FieldIndex_MapKey_); ok {
		return x.MapKey
	}
	return nil
}

func (x *FieldIndex) GetIndex() uint64 {
	if x, ok := x.GetKind().(*FieldIndex_Index); ok {
		return x.Index
	}
	return 0
}

type isFieldIndex_Kind interface {
	isFieldIndex_Kind()
}

type FieldIndex_Field struct {
	// uint32 is the maximum represent field tags:
	// https://stackoverflow.com/a/63666587
	Field uint32 `protobuf:"varint,1,opt,name=field,proto3,oneof"` // Field number
}

type FieldIndex_MapKey_ struct {
	MapKey *FieldIndex_MapKey `protobuf:"bytes,2,opt,name=map_key,json=mapKey,proto3,oneof"`
}

type FieldIndex_Index struct {
	Index uint64 `protobuf:"varint,3,opt,name=index,proto3,oneof"`
}

func (*FieldIndex_Field) isFieldIndex_Kind() {}

func (*FieldIndex_MapKey_) isFieldIndex_Kind() {}

func (*FieldIndex_Index) isFieldIndex_Kind() {}

type FieldIndex_MapKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*FieldIndex_MapKey_S
	//	*FieldIndex_MapKey_Boolean
	//	*FieldIndex_MapKey_Ui32
	//	*FieldIndex_MapKey_Ui64
	//	*FieldIndex_MapKey_I32
	//	*FieldIndex_MapKey_I64
	Type isFieldIndex_MapKey_Type `protobuf_oneof:"type"`
}

func (x *FieldIndex_MapKey) Reset() {
	*x = FieldIndex_MapKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_tools_proto_splitter_chunk_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldIndex_MapKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldIndex_MapKey) ProtoMessage() {}

func (x *FieldIndex_MapKey) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_tools_proto_splitter_chunk_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldIndex_MapKey.ProtoReflect.Descriptor instead.
func (*FieldIndex_MapKey) Descriptor() ([]byte, []int) {
	return file_tensorflow_tools_proto_splitter_chunk_proto_rawDescGZIP(), []int{4, 0}
}

func (m *FieldIndex_MapKey) GetType() isFieldIndex_MapKey_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *FieldIndex_MapKey) GetS() string {
	if x, ok := x.GetType().(*FieldIndex_MapKey_S); ok {
		return x.S
	}
	return ""
}

func (x *FieldIndex_MapKey) GetBoolean() bool {
	if x, ok := x.GetType().(*FieldIndex_MapKey_Boolean); ok {
		return x.Boolean
	}
	return false
}

func (x *FieldIndex_MapKey) GetUi32() uint32 {
	if x, ok := x.GetType().(*FieldIndex_MapKey_Ui32); ok {
		return x.Ui32
	}
	return 0
}

func (x *FieldIndex_MapKey) GetUi64() uint64 {
	if x, ok := x.GetType().(*FieldIndex_MapKey_Ui64); ok {
		return x.Ui64
	}
	return 0
}

func (x *FieldIndex_MapKey) GetI32() int32 {
	if x, ok := x.GetType().(*FieldIndex_MapKey_I32); ok {
		return x.I32
	}
	return 0
}

func (x *FieldIndex_MapKey) GetI64() int64 {
	if x, ok := x.GetType().(*FieldIndex_MapKey_I64); ok {
		return x.I64
	}
	return 0
}

type isFieldIndex_MapKey_Type interface {
	isFieldIndex_MapKey_Type()
}

type FieldIndex_MapKey_S struct {
	S string `protobuf:"bytes,1,opt,name=s,proto3,oneof"`
}

type FieldIndex_MapKey_Boolean struct {
	Boolean bool `protobuf:"varint,2,opt,name=boolean,proto3,oneof"`
}

type FieldIndex_MapKey_Ui32 struct {
	Ui32 uint32 `protobuf:"varint,3,opt,name=ui32,proto3,oneof"`
}

type FieldIndex_MapKey_Ui64 struct {
	Ui64 uint64 `protobuf:"varint,4,opt,name=ui64,proto3,oneof"`
}

type FieldIndex_MapKey_I32 struct {
	I32 int32 `protobuf:"varint,5,opt,name=i32,proto3,oneof"`
}

type FieldIndex_MapKey_I64 struct {
	I64 int64 `protobuf:"varint,6,opt,name=i64,proto3,oneof"` // TODO(278326592): Add sfixed key types if needed.
}

func (*FieldIndex_MapKey_S) isFieldIndex_MapKey_Type() {}

func (*FieldIndex_MapKey_Boolean) isFieldIndex_MapKey_Type() {}

func (*FieldIndex_MapKey_Ui32) isFieldIndex_MapKey_Type() {}

func (*FieldIndex_MapKey_Ui64) isFieldIndex_MapKey_Type() {}

func (*FieldIndex_MapKey_I32) isFieldIndex_MapKey_Type() {}

func (*FieldIndex_MapKey_I64) isFieldIndex_MapKey_Type() {}

var File_tensorflow_tools_proto_splitter_chunk_proto protoreflect.FileDescriptor

var file_tensorflow_tools_proto_splitter_chunk_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x74, 0x6f, 0x6f,
	0x6c, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x2f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x1a, 0x2e, 0x74,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x2f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb2, 0x01,
	0x0a, 0x0d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x34, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x06, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x70,
	0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x06, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x38, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x09, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x2e,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x22, 0x29, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x4e, 0x53, 0x45,
	0x54, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x01,
	0x12, 0x09, 0x0a, 0x05, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x02, 0x22, 0x8b, 0x01, 0x0a, 0x0e,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x24,
	0x0a, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x0e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0d, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x81, 0x01, 0x0a, 0x0c, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x54, 0x61, 0x67, 0x12, 0x38, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x70, 0x6c,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x95, 0x02,
	0x0a, 0x0a, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x3c, 0x0a, 0x07, 0x6d, 0x61, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x70,
	0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x06, 0x6d, 0x61, 0x70, 0x4b,
	0x65, 0x79, 0x12, 0x16, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0x90, 0x01, 0x0a, 0x06, 0x4d,
	0x61, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x01, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x01, 0x73, 0x12, 0x1a, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x12, 0x14, 0x0a, 0x04, 0x75, 0x69, 0x33, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x00, 0x52, 0x04, 0x75, 0x69, 0x33, 0x32, 0x12, 0x14, 0x0a, 0x04, 0x75, 0x69, 0x36, 0x34, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x04, 0x75, 0x69, 0x36, 0x34, 0x12, 0x12, 0x0a,
	0x03, 0x69, 0x33, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x03, 0x69, 0x33,
	0x32, 0x12, 0x12, 0x0a, 0x03, 0x69, 0x36, 0x34, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00,
	0x52, 0x03, 0x69, 0x36, 0x34, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x42, 0x06, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x42, 0xc2, 0x01, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x42, 0x0a, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x49, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x69, 0x72, 0x65, 0x6e, 0x61, 0x73, 0x2f, 0x67,
	0x6f, 0x2d, 0x74, 0x66, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x2f, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x70, 0x6c,
	0x69, 0x74, 0x74, 0x65, 0x72, 0xf8, 0x01, 0x01, 0xa2, 0x02, 0x03, 0x50, 0x58, 0x58, 0xaa, 0x02,
	0x0d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0xca, 0x02,
	0x0d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0xe2, 0x02,
	0x19, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0d, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_tensorflow_tools_proto_splitter_chunk_proto_rawDescOnce sync.Once
	file_tensorflow_tools_proto_splitter_chunk_proto_rawDescData = file_tensorflow_tools_proto_splitter_chunk_proto_rawDesc
)

func file_tensorflow_tools_proto_splitter_chunk_proto_rawDescGZIP() []byte {
	file_tensorflow_tools_proto_splitter_chunk_proto_rawDescOnce.Do(func() {
		file_tensorflow_tools_proto_splitter_chunk_proto_rawDescData = protoimpl.X.CompressGZIP(file_tensorflow_tools_proto_splitter_chunk_proto_rawDescData)
	})
	return file_tensorflow_tools_proto_splitter_chunk_proto_rawDescData
}

var file_tensorflow_tools_proto_splitter_chunk_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_tensorflow_tools_proto_splitter_chunk_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_tensorflow_tools_proto_splitter_chunk_proto_goTypes = []interface{}{
	(ChunkInfo_Type)(0),       // 0: proto_splitter.ChunkInfo.Type
	(*ChunkMetadata)(nil),     // 1: proto_splitter.ChunkMetadata
	(*ChunkInfo)(nil),         // 2: proto_splitter.ChunkInfo
	(*ChunkedMessage)(nil),    // 3: proto_splitter.ChunkedMessage
	(*ChunkedField)(nil),      // 4: proto_splitter.ChunkedField
	(*FieldIndex)(nil),        // 5: proto_splitter.FieldIndex
	(*FieldIndex_MapKey)(nil), // 6: proto_splitter.FieldIndex.MapKey
	(*VersionDef)(nil),        // 7: proto_splitter.VersionDef
}
var file_tensorflow_tools_proto_splitter_chunk_proto_depIdxs = []int32{
	7, // 0: proto_splitter.ChunkMetadata.version:type_name -> proto_splitter.VersionDef
	2, // 1: proto_splitter.ChunkMetadata.chunks:type_name -> proto_splitter.ChunkInfo
	3, // 2: proto_splitter.ChunkMetadata.message:type_name -> proto_splitter.ChunkedMessage
	0, // 3: proto_splitter.ChunkInfo.type:type_name -> proto_splitter.ChunkInfo.Type
	4, // 4: proto_splitter.ChunkedMessage.chunked_fields:type_name -> proto_splitter.ChunkedField
	5, // 5: proto_splitter.ChunkedField.field_tag:type_name -> proto_splitter.FieldIndex
	3, // 6: proto_splitter.ChunkedField.message:type_name -> proto_splitter.ChunkedMessage
	6, // 7: proto_splitter.FieldIndex.map_key:type_name -> proto_splitter.FieldIndex.MapKey
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_tensorflow_tools_proto_splitter_chunk_proto_init() }
func file_tensorflow_tools_proto_splitter_chunk_proto_init() {
	if File_tensorflow_tools_proto_splitter_chunk_proto != nil {
		return
	}
	file_tensorflow_tools_proto_splitter_versions_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_tensorflow_tools_proto_splitter_chunk_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_tools_proto_splitter_chunk_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_tools_proto_splitter_chunk_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_tools_proto_splitter_chunk_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkedField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_tools_proto_splitter_chunk_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_tools_proto_splitter_chunk_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldIndex_MapKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tensorflow_tools_proto_splitter_chunk_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_tensorflow_tools_proto_splitter_chunk_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*FieldIndex_Field)(nil),
		(*FieldIndex_MapKey_)(nil),
		(*FieldIndex_Index)(nil),
	}
	file_tensorflow_tools_proto_splitter_chunk_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*FieldIndex_MapKey_S)(nil),
		(*FieldIndex_MapKey_Boolean)(nil),
		(*FieldIndex_MapKey_Ui32)(nil),
		(*FieldIndex_MapKey_Ui64)(nil),
		(*FieldIndex_MapKey_I32)(nil),
		(*FieldIndex_MapKey_I64)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tensorflow_tools_proto_splitter_chunk_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tensorflow_tools_proto_splitter_chunk_proto_goTypes,
		DependencyIndexes: file_tensorflow_tools_proto_splitter_chunk_proto_depIdxs,
		EnumInfos:         file_tensorflow_tools_proto_splitter_chunk_proto_enumTypes,
		MessageInfos:      file_tensorflow_tools_proto_splitter_chunk_proto_msgTypes,
	}.Build()
	File_tensorflow_tools_proto_splitter_chunk_proto = out.File
	file_tensorflow_tools_proto_splitter_chunk_proto_rawDesc = nil
	file_tensorflow_tools_proto_splitter_chunk_proto_goTypes = nil
	file_tensorflow_tools_proto_splitter_chunk_proto_depIdxs = nil
}
